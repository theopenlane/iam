// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package client

import (
	"context"

	"github.com/openfga/go-sdk"
	"github.com/openfga/go-sdk/client"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSdkClient creates a new instance of MockSdkClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClient {
	mock := &MockSdkClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSdkClient is an autogenerated mock type for the SdkClient type
type MockSdkClient struct {
	mock.Mock
}

type MockSdkClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClient) EXPECT() *MockSdkClient_Expecter {
	return &MockSdkClient_Expecter{mock: &_m.Mock}
}

// BatchCheck provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) BatchCheck(ctx context.Context) client.SdkClientBatchCheckRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BatchCheck")
	}

	var r0 client.SdkClientBatchCheckRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientBatchCheckRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientBatchCheckRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_BatchCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCheck'
type MockSdkClient_BatchCheck_Call struct {
	*mock.Call
}

// BatchCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) BatchCheck(ctx interface{}) *MockSdkClient_BatchCheck_Call {
	return &MockSdkClient_BatchCheck_Call{Call: _e.mock.On("BatchCheck", ctx)}
}

func (_c *MockSdkClient_BatchCheck_Call) Run(run func(ctx context.Context)) *MockSdkClient_BatchCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_BatchCheck_Call) Return(sdkClientBatchCheckRequestInterface client.SdkClientBatchCheckRequestInterface) *MockSdkClient_BatchCheck_Call {
	_c.Call.Return(sdkClientBatchCheckRequestInterface)
	return _c
}

func (_c *MockSdkClient_BatchCheck_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientBatchCheckRequestInterface) *MockSdkClient_BatchCheck_Call {
	_c.Call.Return(run)
	return _c
}

// BatchCheckExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) BatchCheckExecute(request client.SdkClientBatchCheckRequestInterface) (*openfga.BatchCheckResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for BatchCheckExecute")
	}

	var r0 *openfga.BatchCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientBatchCheckRequestInterface) (*openfga.BatchCheckResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientBatchCheckRequestInterface) *openfga.BatchCheckResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.BatchCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientBatchCheckRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_BatchCheckExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCheckExecute'
type MockSdkClient_BatchCheckExecute_Call struct {
	*mock.Call
}

// BatchCheckExecute is a helper method to define mock.On call
//   - request client.SdkClientBatchCheckRequestInterface
func (_e *MockSdkClient_Expecter) BatchCheckExecute(request interface{}) *MockSdkClient_BatchCheckExecute_Call {
	return &MockSdkClient_BatchCheckExecute_Call{Call: _e.mock.On("BatchCheckExecute", request)}
}

func (_c *MockSdkClient_BatchCheckExecute_Call) Run(run func(request client.SdkClientBatchCheckRequestInterface)) *MockSdkClient_BatchCheckExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientBatchCheckRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientBatchCheckRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_BatchCheckExecute_Call) Return(batchCheckResponse *openfga.BatchCheckResponse, err error) *MockSdkClient_BatchCheckExecute_Call {
	_c.Call.Return(batchCheckResponse, err)
	return _c
}

func (_c *MockSdkClient_BatchCheckExecute_Call) RunAndReturn(run func(request client.SdkClientBatchCheckRequestInterface) (*openfga.BatchCheckResponse, error)) *MockSdkClient_BatchCheckExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Check provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) Check(ctx context.Context) client.SdkClientCheckRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 client.SdkClientCheckRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientCheckRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientCheckRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockSdkClient_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) Check(ctx interface{}) *MockSdkClient_Check_Call {
	return &MockSdkClient_Check_Call{Call: _e.mock.On("Check", ctx)}
}

func (_c *MockSdkClient_Check_Call) Run(run func(ctx context.Context)) *MockSdkClient_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_Check_Call) Return(sdkClientCheckRequestInterface client.SdkClientCheckRequestInterface) *MockSdkClient_Check_Call {
	_c.Call.Return(sdkClientCheckRequestInterface)
	return _c
}

func (_c *MockSdkClient_Check_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientCheckRequestInterface) *MockSdkClient_Check_Call {
	_c.Call.Return(run)
	return _c
}

// CheckExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) CheckExecute(request client.SdkClientCheckRequestInterface) (*client.ClientCheckResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CheckExecute")
	}

	var r0 *client.ClientCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientCheckRequestInterface) (*client.ClientCheckResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientCheckRequestInterface) *client.ClientCheckResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientCheckRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_CheckExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckExecute'
type MockSdkClient_CheckExecute_Call struct {
	*mock.Call
}

// CheckExecute is a helper method to define mock.On call
//   - request client.SdkClientCheckRequestInterface
func (_e *MockSdkClient_Expecter) CheckExecute(request interface{}) *MockSdkClient_CheckExecute_Call {
	return &MockSdkClient_CheckExecute_Call{Call: _e.mock.On("CheckExecute", request)}
}

func (_c *MockSdkClient_CheckExecute_Call) Run(run func(request client.SdkClientCheckRequestInterface)) *MockSdkClient_CheckExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientCheckRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientCheckRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_CheckExecute_Call) Return(clientCheckResponse *client.ClientCheckResponse, err error) *MockSdkClient_CheckExecute_Call {
	_c.Call.Return(clientCheckResponse, err)
	return _c
}

func (_c *MockSdkClient_CheckExecute_Call) RunAndReturn(run func(request client.SdkClientCheckRequestInterface) (*client.ClientCheckResponse, error)) *MockSdkClient_CheckExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ClientBatchCheck provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ClientBatchCheck(ctx context.Context) client.SdkClientBatchCheckClientRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClientBatchCheck")
	}

	var r0 client.SdkClientBatchCheckClientRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientBatchCheckClientRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientBatchCheckClientRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ClientBatchCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientBatchCheck'
type MockSdkClient_ClientBatchCheck_Call struct {
	*mock.Call
}

// ClientBatchCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ClientBatchCheck(ctx interface{}) *MockSdkClient_ClientBatchCheck_Call {
	return &MockSdkClient_ClientBatchCheck_Call{Call: _e.mock.On("ClientBatchCheck", ctx)}
}

func (_c *MockSdkClient_ClientBatchCheck_Call) Run(run func(ctx context.Context)) *MockSdkClient_ClientBatchCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ClientBatchCheck_Call) Return(sdkClientBatchCheckClientRequestInterface client.SdkClientBatchCheckClientRequestInterface) *MockSdkClient_ClientBatchCheck_Call {
	_c.Call.Return(sdkClientBatchCheckClientRequestInterface)
	return _c
}

func (_c *MockSdkClient_ClientBatchCheck_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientBatchCheckClientRequestInterface) *MockSdkClient_ClientBatchCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ClientBatchCheckExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ClientBatchCheckExecute(request client.SdkClientBatchCheckClientRequestInterface) (*client.ClientBatchCheckClientResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ClientBatchCheckExecute")
	}

	var r0 *client.ClientBatchCheckClientResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientBatchCheckClientRequestInterface) (*client.ClientBatchCheckClientResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientBatchCheckClientRequestInterface) *client.ClientBatchCheckClientResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientBatchCheckClientResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientBatchCheckClientRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ClientBatchCheckExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientBatchCheckExecute'
type MockSdkClient_ClientBatchCheckExecute_Call struct {
	*mock.Call
}

// ClientBatchCheckExecute is a helper method to define mock.On call
//   - request client.SdkClientBatchCheckClientRequestInterface
func (_e *MockSdkClient_Expecter) ClientBatchCheckExecute(request interface{}) *MockSdkClient_ClientBatchCheckExecute_Call {
	return &MockSdkClient_ClientBatchCheckExecute_Call{Call: _e.mock.On("ClientBatchCheckExecute", request)}
}

func (_c *MockSdkClient_ClientBatchCheckExecute_Call) Run(run func(request client.SdkClientBatchCheckClientRequestInterface)) *MockSdkClient_ClientBatchCheckExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientBatchCheckClientRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientBatchCheckClientRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ClientBatchCheckExecute_Call) Return(v *client.ClientBatchCheckClientResponse, err error) *MockSdkClient_ClientBatchCheckExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ClientBatchCheckExecute_Call) RunAndReturn(run func(request client.SdkClientBatchCheckClientRequestInterface) (*client.ClientBatchCheckClientResponse, error)) *MockSdkClient_ClientBatchCheckExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStore provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) CreateStore(ctx context.Context) client.SdkClientCreateStoreRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateStore")
	}

	var r0 client.SdkClientCreateStoreRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientCreateStoreRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientCreateStoreRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_CreateStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStore'
type MockSdkClient_CreateStore_Call struct {
	*mock.Call
}

// CreateStore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) CreateStore(ctx interface{}) *MockSdkClient_CreateStore_Call {
	return &MockSdkClient_CreateStore_Call{Call: _e.mock.On("CreateStore", ctx)}
}

func (_c *MockSdkClient_CreateStore_Call) Run(run func(ctx context.Context)) *MockSdkClient_CreateStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_CreateStore_Call) Return(sdkClientCreateStoreRequestInterface client.SdkClientCreateStoreRequestInterface) *MockSdkClient_CreateStore_Call {
	_c.Call.Return(sdkClientCreateStoreRequestInterface)
	return _c
}

func (_c *MockSdkClient_CreateStore_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientCreateStoreRequestInterface) *MockSdkClient_CreateStore_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStoreExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) CreateStoreExecute(request client.SdkClientCreateStoreRequestInterface) (*client.ClientCreateStoreResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoreExecute")
	}

	var r0 *client.ClientCreateStoreResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientCreateStoreRequestInterface) (*client.ClientCreateStoreResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientCreateStoreRequestInterface) *client.ClientCreateStoreResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientCreateStoreResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientCreateStoreRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_CreateStoreExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStoreExecute'
type MockSdkClient_CreateStoreExecute_Call struct {
	*mock.Call
}

// CreateStoreExecute is a helper method to define mock.On call
//   - request client.SdkClientCreateStoreRequestInterface
func (_e *MockSdkClient_Expecter) CreateStoreExecute(request interface{}) *MockSdkClient_CreateStoreExecute_Call {
	return &MockSdkClient_CreateStoreExecute_Call{Call: _e.mock.On("CreateStoreExecute", request)}
}

func (_c *MockSdkClient_CreateStoreExecute_Call) Run(run func(request client.SdkClientCreateStoreRequestInterface)) *MockSdkClient_CreateStoreExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientCreateStoreRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientCreateStoreRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_CreateStoreExecute_Call) Return(v *client.ClientCreateStoreResponse, err error) *MockSdkClient_CreateStoreExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_CreateStoreExecute_Call) RunAndReturn(run func(request client.SdkClientCreateStoreRequestInterface) (*client.ClientCreateStoreResponse, error)) *MockSdkClient_CreateStoreExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStore provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) DeleteStore(ctx context.Context) client.SdkClientDeleteStoreRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStore")
	}

	var r0 client.SdkClientDeleteStoreRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientDeleteStoreRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientDeleteStoreRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_DeleteStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStore'
type MockSdkClient_DeleteStore_Call struct {
	*mock.Call
}

// DeleteStore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) DeleteStore(ctx interface{}) *MockSdkClient_DeleteStore_Call {
	return &MockSdkClient_DeleteStore_Call{Call: _e.mock.On("DeleteStore", ctx)}
}

func (_c *MockSdkClient_DeleteStore_Call) Run(run func(ctx context.Context)) *MockSdkClient_DeleteStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_DeleteStore_Call) Return(sdkClientDeleteStoreRequestInterface client.SdkClientDeleteStoreRequestInterface) *MockSdkClient_DeleteStore_Call {
	_c.Call.Return(sdkClientDeleteStoreRequestInterface)
	return _c
}

func (_c *MockSdkClient_DeleteStore_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientDeleteStoreRequestInterface) *MockSdkClient_DeleteStore_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStoreExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) DeleteStoreExecute(request client.SdkClientDeleteStoreRequestInterface) (*client.ClientDeleteStoreResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStoreExecute")
	}

	var r0 *client.ClientDeleteStoreResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientDeleteStoreRequestInterface) (*client.ClientDeleteStoreResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientDeleteStoreRequestInterface) *client.ClientDeleteStoreResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientDeleteStoreResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientDeleteStoreRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_DeleteStoreExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStoreExecute'
type MockSdkClient_DeleteStoreExecute_Call struct {
	*mock.Call
}

// DeleteStoreExecute is a helper method to define mock.On call
//   - request client.SdkClientDeleteStoreRequestInterface
func (_e *MockSdkClient_Expecter) DeleteStoreExecute(request interface{}) *MockSdkClient_DeleteStoreExecute_Call {
	return &MockSdkClient_DeleteStoreExecute_Call{Call: _e.mock.On("DeleteStoreExecute", request)}
}

func (_c *MockSdkClient_DeleteStoreExecute_Call) Run(run func(request client.SdkClientDeleteStoreRequestInterface)) *MockSdkClient_DeleteStoreExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientDeleteStoreRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientDeleteStoreRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_DeleteStoreExecute_Call) Return(clientDeleteStoreResponse *client.ClientDeleteStoreResponse, err error) *MockSdkClient_DeleteStoreExecute_Call {
	_c.Call.Return(clientDeleteStoreResponse, err)
	return _c
}

func (_c *MockSdkClient_DeleteStoreExecute_Call) RunAndReturn(run func(request client.SdkClientDeleteStoreRequestInterface) (*client.ClientDeleteStoreResponse, error)) *MockSdkClient_DeleteStoreExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTuples provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) DeleteTuples(ctx context.Context) client.SdkClientDeleteTuplesRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTuples")
	}

	var r0 client.SdkClientDeleteTuplesRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientDeleteTuplesRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientDeleteTuplesRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_DeleteTuples_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTuples'
type MockSdkClient_DeleteTuples_Call struct {
	*mock.Call
}

// DeleteTuples is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) DeleteTuples(ctx interface{}) *MockSdkClient_DeleteTuples_Call {
	return &MockSdkClient_DeleteTuples_Call{Call: _e.mock.On("DeleteTuples", ctx)}
}

func (_c *MockSdkClient_DeleteTuples_Call) Run(run func(ctx context.Context)) *MockSdkClient_DeleteTuples_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_DeleteTuples_Call) Return(sdkClientDeleteTuplesRequestInterface client.SdkClientDeleteTuplesRequestInterface) *MockSdkClient_DeleteTuples_Call {
	_c.Call.Return(sdkClientDeleteTuplesRequestInterface)
	return _c
}

func (_c *MockSdkClient_DeleteTuples_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientDeleteTuplesRequestInterface) *MockSdkClient_DeleteTuples_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTuplesExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) DeleteTuplesExecute(request client.SdkClientDeleteTuplesRequestInterface) (*client.ClientWriteResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTuplesExecute")
	}

	var r0 *client.ClientWriteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientDeleteTuplesRequestInterface) (*client.ClientWriteResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientDeleteTuplesRequestInterface) *client.ClientWriteResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientDeleteTuplesRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_DeleteTuplesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTuplesExecute'
type MockSdkClient_DeleteTuplesExecute_Call struct {
	*mock.Call
}

// DeleteTuplesExecute is a helper method to define mock.On call
//   - request client.SdkClientDeleteTuplesRequestInterface
func (_e *MockSdkClient_Expecter) DeleteTuplesExecute(request interface{}) *MockSdkClient_DeleteTuplesExecute_Call {
	return &MockSdkClient_DeleteTuplesExecute_Call{Call: _e.mock.On("DeleteTuplesExecute", request)}
}

func (_c *MockSdkClient_DeleteTuplesExecute_Call) Run(run func(request client.SdkClientDeleteTuplesRequestInterface)) *MockSdkClient_DeleteTuplesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientDeleteTuplesRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientDeleteTuplesRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_DeleteTuplesExecute_Call) Return(clientWriteResponse *client.ClientWriteResponse, err error) *MockSdkClient_DeleteTuplesExecute_Call {
	_c.Call.Return(clientWriteResponse, err)
	return _c
}

func (_c *MockSdkClient_DeleteTuplesExecute_Call) RunAndReturn(run func(request client.SdkClientDeleteTuplesRequestInterface) (*client.ClientWriteResponse, error)) *MockSdkClient_DeleteTuplesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Expand provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) Expand(ctx context.Context) client.SdkClientExpandRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Expand")
	}

	var r0 client.SdkClientExpandRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientExpandRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientExpandRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_Expand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expand'
type MockSdkClient_Expand_Call struct {
	*mock.Call
}

// Expand is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) Expand(ctx interface{}) *MockSdkClient_Expand_Call {
	return &MockSdkClient_Expand_Call{Call: _e.mock.On("Expand", ctx)}
}

func (_c *MockSdkClient_Expand_Call) Run(run func(ctx context.Context)) *MockSdkClient_Expand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_Expand_Call) Return(sdkClientExpandRequestInterface client.SdkClientExpandRequestInterface) *MockSdkClient_Expand_Call {
	_c.Call.Return(sdkClientExpandRequestInterface)
	return _c
}

func (_c *MockSdkClient_Expand_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientExpandRequestInterface) *MockSdkClient_Expand_Call {
	_c.Call.Return(run)
	return _c
}

// ExpandExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ExpandExecute(request client.SdkClientExpandRequestInterface) (*client.ClientExpandResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ExpandExecute")
	}

	var r0 *client.ClientExpandResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientExpandRequestInterface) (*client.ClientExpandResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientExpandRequestInterface) *client.ClientExpandResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientExpandResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientExpandRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ExpandExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpandExecute'
type MockSdkClient_ExpandExecute_Call struct {
	*mock.Call
}

// ExpandExecute is a helper method to define mock.On call
//   - request client.SdkClientExpandRequestInterface
func (_e *MockSdkClient_Expecter) ExpandExecute(request interface{}) *MockSdkClient_ExpandExecute_Call {
	return &MockSdkClient_ExpandExecute_Call{Call: _e.mock.On("ExpandExecute", request)}
}

func (_c *MockSdkClient_ExpandExecute_Call) Run(run func(request client.SdkClientExpandRequestInterface)) *MockSdkClient_ExpandExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientExpandRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientExpandRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ExpandExecute_Call) Return(v *client.ClientExpandResponse, err error) *MockSdkClient_ExpandExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ExpandExecute_Call) RunAndReturn(run func(request client.SdkClientExpandRequestInterface) (*client.ClientExpandResponse, error)) *MockSdkClient_ExpandExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizationModelId provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) GetAuthorizationModelId() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationModelId")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_GetAuthorizationModelId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationModelId'
type MockSdkClient_GetAuthorizationModelId_Call struct {
	*mock.Call
}

// GetAuthorizationModelId is a helper method to define mock.On call
func (_e *MockSdkClient_Expecter) GetAuthorizationModelId() *MockSdkClient_GetAuthorizationModelId_Call {
	return &MockSdkClient_GetAuthorizationModelId_Call{Call: _e.mock.On("GetAuthorizationModelId")}
}

func (_c *MockSdkClient_GetAuthorizationModelId_Call) Run(run func()) *MockSdkClient_GetAuthorizationModelId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClient_GetAuthorizationModelId_Call) Return(s string, err error) *MockSdkClient_GetAuthorizationModelId_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSdkClient_GetAuthorizationModelId_Call) RunAndReturn(run func() (string, error)) *MockSdkClient_GetAuthorizationModelId_Call {
	_c.Call.Return(run)
	return _c
}

// GetStore provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) GetStore(ctx context.Context) client.SdkClientGetStoreRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 client.SdkClientGetStoreRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientGetStoreRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientGetStoreRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_GetStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStore'
type MockSdkClient_GetStore_Call struct {
	*mock.Call
}

// GetStore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) GetStore(ctx interface{}) *MockSdkClient_GetStore_Call {
	return &MockSdkClient_GetStore_Call{Call: _e.mock.On("GetStore", ctx)}
}

func (_c *MockSdkClient_GetStore_Call) Run(run func(ctx context.Context)) *MockSdkClient_GetStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_GetStore_Call) Return(sdkClientGetStoreRequestInterface client.SdkClientGetStoreRequestInterface) *MockSdkClient_GetStore_Call {
	_c.Call.Return(sdkClientGetStoreRequestInterface)
	return _c
}

func (_c *MockSdkClient_GetStore_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientGetStoreRequestInterface) *MockSdkClient_GetStore_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) GetStoreExecute(request client.SdkClientGetStoreRequestInterface) (*client.ClientGetStoreResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for GetStoreExecute")
	}

	var r0 *client.ClientGetStoreResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientGetStoreRequestInterface) (*client.ClientGetStoreResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientGetStoreRequestInterface) *client.ClientGetStoreResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientGetStoreResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientGetStoreRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_GetStoreExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreExecute'
type MockSdkClient_GetStoreExecute_Call struct {
	*mock.Call
}

// GetStoreExecute is a helper method to define mock.On call
//   - request client.SdkClientGetStoreRequestInterface
func (_e *MockSdkClient_Expecter) GetStoreExecute(request interface{}) *MockSdkClient_GetStoreExecute_Call {
	return &MockSdkClient_GetStoreExecute_Call{Call: _e.mock.On("GetStoreExecute", request)}
}

func (_c *MockSdkClient_GetStoreExecute_Call) Run(run func(request client.SdkClientGetStoreRequestInterface)) *MockSdkClient_GetStoreExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientGetStoreRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientGetStoreRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_GetStoreExecute_Call) Return(v *client.ClientGetStoreResponse, err error) *MockSdkClient_GetStoreExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_GetStoreExecute_Call) RunAndReturn(run func(request client.SdkClientGetStoreRequestInterface) (*client.ClientGetStoreResponse, error)) *MockSdkClient_GetStoreExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreId provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) GetStoreId() (string, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreId")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (string, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_GetStoreId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreId'
type MockSdkClient_GetStoreId_Call struct {
	*mock.Call
}

// GetStoreId is a helper method to define mock.On call
func (_e *MockSdkClient_Expecter) GetStoreId() *MockSdkClient_GetStoreId_Call {
	return &MockSdkClient_GetStoreId_Call{Call: _e.mock.On("GetStoreId")}
}

func (_c *MockSdkClient_GetStoreId_Call) Run(run func()) *MockSdkClient_GetStoreId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClient_GetStoreId_Call) Return(s string, err error) *MockSdkClient_GetStoreId_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockSdkClient_GetStoreId_Call) RunAndReturn(run func() (string, error)) *MockSdkClient_GetStoreId_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjects provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ListObjects(ctx context.Context) client.SdkClientListObjectsRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 client.SdkClientListObjectsRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientListObjectsRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListObjectsRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type MockSdkClient_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ListObjects(ctx interface{}) *MockSdkClient_ListObjects_Call {
	return &MockSdkClient_ListObjects_Call{Call: _e.mock.On("ListObjects", ctx)}
}

func (_c *MockSdkClient_ListObjects_Call) Run(run func(ctx context.Context)) *MockSdkClient_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ListObjects_Call) Return(sdkClientListObjectsRequestInterface client.SdkClientListObjectsRequestInterface) *MockSdkClient_ListObjects_Call {
	_c.Call.Return(sdkClientListObjectsRequestInterface)
	return _c
}

func (_c *MockSdkClient_ListObjects_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientListObjectsRequestInterface) *MockSdkClient_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjectsExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ListObjectsExecute(request client.SdkClientListObjectsRequestInterface) (*client.ClientListObjectsResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectsExecute")
	}

	var r0 *client.ClientListObjectsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientListObjectsRequestInterface) (*client.ClientListObjectsResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientListObjectsRequestInterface) *client.ClientListObjectsResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListObjectsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientListObjectsRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ListObjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjectsExecute'
type MockSdkClient_ListObjectsExecute_Call struct {
	*mock.Call
}

// ListObjectsExecute is a helper method to define mock.On call
//   - request client.SdkClientListObjectsRequestInterface
func (_e *MockSdkClient_Expecter) ListObjectsExecute(request interface{}) *MockSdkClient_ListObjectsExecute_Call {
	return &MockSdkClient_ListObjectsExecute_Call{Call: _e.mock.On("ListObjectsExecute", request)}
}

func (_c *MockSdkClient_ListObjectsExecute_Call) Run(run func(request client.SdkClientListObjectsRequestInterface)) *MockSdkClient_ListObjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientListObjectsRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientListObjectsRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ListObjectsExecute_Call) Return(v *client.ClientListObjectsResponse, err error) *MockSdkClient_ListObjectsExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ListObjectsExecute_Call) RunAndReturn(run func(request client.SdkClientListObjectsRequestInterface) (*client.ClientListObjectsResponse, error)) *MockSdkClient_ListObjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListRelations provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ListRelations(ctx context.Context) client.SdkClientListRelationsRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRelations")
	}

	var r0 client.SdkClientListRelationsRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientListRelationsRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListRelationsRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ListRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRelations'
type MockSdkClient_ListRelations_Call struct {
	*mock.Call
}

// ListRelations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ListRelations(ctx interface{}) *MockSdkClient_ListRelations_Call {
	return &MockSdkClient_ListRelations_Call{Call: _e.mock.On("ListRelations", ctx)}
}

func (_c *MockSdkClient_ListRelations_Call) Run(run func(ctx context.Context)) *MockSdkClient_ListRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ListRelations_Call) Return(sdkClientListRelationsRequestInterface client.SdkClientListRelationsRequestInterface) *MockSdkClient_ListRelations_Call {
	_c.Call.Return(sdkClientListRelationsRequestInterface)
	return _c
}

func (_c *MockSdkClient_ListRelations_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientListRelationsRequestInterface) *MockSdkClient_ListRelations_Call {
	_c.Call.Return(run)
	return _c
}

// ListRelationsExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ListRelationsExecute(request client.SdkClientListRelationsRequestInterface) (*client.ClientListRelationsResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ListRelationsExecute")
	}

	var r0 *client.ClientListRelationsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientListRelationsRequestInterface) (*client.ClientListRelationsResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientListRelationsRequestInterface) *client.ClientListRelationsResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListRelationsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientListRelationsRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ListRelationsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRelationsExecute'
type MockSdkClient_ListRelationsExecute_Call struct {
	*mock.Call
}

// ListRelationsExecute is a helper method to define mock.On call
//   - request client.SdkClientListRelationsRequestInterface
func (_e *MockSdkClient_Expecter) ListRelationsExecute(request interface{}) *MockSdkClient_ListRelationsExecute_Call {
	return &MockSdkClient_ListRelationsExecute_Call{Call: _e.mock.On("ListRelationsExecute", request)}
}

func (_c *MockSdkClient_ListRelationsExecute_Call) Run(run func(request client.SdkClientListRelationsRequestInterface)) *MockSdkClient_ListRelationsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientListRelationsRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientListRelationsRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ListRelationsExecute_Call) Return(clientListRelationsResponse *client.ClientListRelationsResponse, err error) *MockSdkClient_ListRelationsExecute_Call {
	_c.Call.Return(clientListRelationsResponse, err)
	return _c
}

func (_c *MockSdkClient_ListRelationsExecute_Call) RunAndReturn(run func(request client.SdkClientListRelationsRequestInterface) (*client.ClientListRelationsResponse, error)) *MockSdkClient_ListRelationsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListStores provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ListStores(ctx context.Context) client.SdkClientListStoresRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListStores")
	}

	var r0 client.SdkClientListStoresRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientListStoresRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListStoresRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ListStores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStores'
type MockSdkClient_ListStores_Call struct {
	*mock.Call
}

// ListStores is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ListStores(ctx interface{}) *MockSdkClient_ListStores_Call {
	return &MockSdkClient_ListStores_Call{Call: _e.mock.On("ListStores", ctx)}
}

func (_c *MockSdkClient_ListStores_Call) Run(run func(ctx context.Context)) *MockSdkClient_ListStores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ListStores_Call) Return(sdkClientListStoresRequestInterface client.SdkClientListStoresRequestInterface) *MockSdkClient_ListStores_Call {
	_c.Call.Return(sdkClientListStoresRequestInterface)
	return _c
}

func (_c *MockSdkClient_ListStores_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientListStoresRequestInterface) *MockSdkClient_ListStores_Call {
	_c.Call.Return(run)
	return _c
}

// ListStoresExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ListStoresExecute(request client.SdkClientListStoresRequestInterface) (*client.ClientListStoresResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ListStoresExecute")
	}

	var r0 *client.ClientListStoresResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientListStoresRequestInterface) (*client.ClientListStoresResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientListStoresRequestInterface) *client.ClientListStoresResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListStoresResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientListStoresRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ListStoresExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStoresExecute'
type MockSdkClient_ListStoresExecute_Call struct {
	*mock.Call
}

// ListStoresExecute is a helper method to define mock.On call
//   - request client.SdkClientListStoresRequestInterface
func (_e *MockSdkClient_Expecter) ListStoresExecute(request interface{}) *MockSdkClient_ListStoresExecute_Call {
	return &MockSdkClient_ListStoresExecute_Call{Call: _e.mock.On("ListStoresExecute", request)}
}

func (_c *MockSdkClient_ListStoresExecute_Call) Run(run func(request client.SdkClientListStoresRequestInterface)) *MockSdkClient_ListStoresExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientListStoresRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientListStoresRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ListStoresExecute_Call) Return(v *client.ClientListStoresResponse, err error) *MockSdkClient_ListStoresExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ListStoresExecute_Call) RunAndReturn(run func(request client.SdkClientListStoresRequestInterface) (*client.ClientListStoresResponse, error)) *MockSdkClient_ListStoresExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ListUsers(ctx context.Context) client.SdkClientListUsersRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 client.SdkClientListUsersRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientListUsersRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListUsersRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockSdkClient_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ListUsers(ctx interface{}) *MockSdkClient_ListUsers_Call {
	return &MockSdkClient_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx)}
}

func (_c *MockSdkClient_ListUsers_Call) Run(run func(ctx context.Context)) *MockSdkClient_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ListUsers_Call) Return(sdkClientListUsersRequestInterface client.SdkClientListUsersRequestInterface) *MockSdkClient_ListUsers_Call {
	_c.Call.Return(sdkClientListUsersRequestInterface)
	return _c
}

func (_c *MockSdkClient_ListUsers_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientListUsersRequestInterface) *MockSdkClient_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ListUsersExecute(r client.SdkClientListUsersRequestInterface) (*client.ClientListUsersResponse, error) {
	ret := _mock.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersExecute")
	}

	var r0 *client.ClientListUsersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientListUsersRequestInterface) (*client.ClientListUsersResponse, error)); ok {
		return returnFunc(r)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientListUsersRequestInterface) *client.ClientListUsersResponse); ok {
		r0 = returnFunc(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListUsersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientListUsersRequestInterface) error); ok {
		r1 = returnFunc(r)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ListUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersExecute'
type MockSdkClient_ListUsersExecute_Call struct {
	*mock.Call
}

// ListUsersExecute is a helper method to define mock.On call
//   - r client.SdkClientListUsersRequestInterface
func (_e *MockSdkClient_Expecter) ListUsersExecute(r interface{}) *MockSdkClient_ListUsersExecute_Call {
	return &MockSdkClient_ListUsersExecute_Call{Call: _e.mock.On("ListUsersExecute", r)}
}

func (_c *MockSdkClient_ListUsersExecute_Call) Run(run func(r client.SdkClientListUsersRequestInterface)) *MockSdkClient_ListUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientListUsersRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientListUsersRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ListUsersExecute_Call) Return(v *client.ClientListUsersResponse, err error) *MockSdkClient_ListUsersExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ListUsersExecute_Call) RunAndReturn(run func(r client.SdkClientListUsersRequestInterface) (*client.ClientListUsersResponse, error)) *MockSdkClient_ListUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) Read(ctx context.Context) client.SdkClientReadRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 client.SdkClientReadRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientReadRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockSdkClient_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) Read(ctx interface{}) *MockSdkClient_Read_Call {
	return &MockSdkClient_Read_Call{Call: _e.mock.On("Read", ctx)}
}

func (_c *MockSdkClient_Read_Call) Run(run func(ctx context.Context)) *MockSdkClient_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_Read_Call) Return(sdkClientReadRequestInterface client.SdkClientReadRequestInterface) *MockSdkClient_Read_Call {
	_c.Call.Return(sdkClientReadRequestInterface)
	return _c
}

func (_c *MockSdkClient_Read_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientReadRequestInterface) *MockSdkClient_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAssertions provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadAssertions(ctx context.Context) client.SdkClientReadAssertionsRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadAssertions")
	}

	var r0 client.SdkClientReadAssertionsRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientReadAssertionsRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadAssertionsRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ReadAssertions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAssertions'
type MockSdkClient_ReadAssertions_Call struct {
	*mock.Call
}

// ReadAssertions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadAssertions(ctx interface{}) *MockSdkClient_ReadAssertions_Call {
	return &MockSdkClient_ReadAssertions_Call{Call: _e.mock.On("ReadAssertions", ctx)}
}

func (_c *MockSdkClient_ReadAssertions_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadAssertions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadAssertions_Call) Return(sdkClientReadAssertionsRequestInterface client.SdkClientReadAssertionsRequestInterface) *MockSdkClient_ReadAssertions_Call {
	_c.Call.Return(sdkClientReadAssertionsRequestInterface)
	return _c
}

func (_c *MockSdkClient_ReadAssertions_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientReadAssertionsRequestInterface) *MockSdkClient_ReadAssertions_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAssertionsExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadAssertionsExecute(request client.SdkClientReadAssertionsRequestInterface) (*client.ClientReadAssertionsResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadAssertionsExecute")
	}

	var r0 *client.ClientReadAssertionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadAssertionsRequestInterface) (*client.ClientReadAssertionsResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadAssertionsRequestInterface) *client.ClientReadAssertionsResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadAssertionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientReadAssertionsRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ReadAssertionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAssertionsExecute'
type MockSdkClient_ReadAssertionsExecute_Call struct {
	*mock.Call
}

// ReadAssertionsExecute is a helper method to define mock.On call
//   - request client.SdkClientReadAssertionsRequestInterface
func (_e *MockSdkClient_Expecter) ReadAssertionsExecute(request interface{}) *MockSdkClient_ReadAssertionsExecute_Call {
	return &MockSdkClient_ReadAssertionsExecute_Call{Call: _e.mock.On("ReadAssertionsExecute", request)}
}

func (_c *MockSdkClient_ReadAssertionsExecute_Call) Run(run func(request client.SdkClientReadAssertionsRequestInterface)) *MockSdkClient_ReadAssertionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientReadAssertionsRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientReadAssertionsRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadAssertionsExecute_Call) Return(v *client.ClientReadAssertionsResponse, err error) *MockSdkClient_ReadAssertionsExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ReadAssertionsExecute_Call) RunAndReturn(run func(request client.SdkClientReadAssertionsRequestInterface) (*client.ClientReadAssertionsResponse, error)) *MockSdkClient_ReadAssertionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAuthorizationModel provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadAuthorizationModel(ctx context.Context) client.SdkClientReadAuthorizationModelRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadAuthorizationModel")
	}

	var r0 client.SdkClientReadAuthorizationModelRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientReadAuthorizationModelRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadAuthorizationModelRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ReadAuthorizationModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAuthorizationModel'
type MockSdkClient_ReadAuthorizationModel_Call struct {
	*mock.Call
}

// ReadAuthorizationModel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadAuthorizationModel(ctx interface{}) *MockSdkClient_ReadAuthorizationModel_Call {
	return &MockSdkClient_ReadAuthorizationModel_Call{Call: _e.mock.On("ReadAuthorizationModel", ctx)}
}

func (_c *MockSdkClient_ReadAuthorizationModel_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadAuthorizationModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModel_Call) Return(sdkClientReadAuthorizationModelRequestInterface client.SdkClientReadAuthorizationModelRequestInterface) *MockSdkClient_ReadAuthorizationModel_Call {
	_c.Call.Return(sdkClientReadAuthorizationModelRequestInterface)
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModel_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientReadAuthorizationModelRequestInterface) *MockSdkClient_ReadAuthorizationModel_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAuthorizationModelExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadAuthorizationModelExecute(request client.SdkClientReadAuthorizationModelRequestInterface) (*client.ClientReadAuthorizationModelResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadAuthorizationModelExecute")
	}

	var r0 *client.ClientReadAuthorizationModelResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadAuthorizationModelRequestInterface) (*client.ClientReadAuthorizationModelResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadAuthorizationModelRequestInterface) *client.ClientReadAuthorizationModelResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadAuthorizationModelResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientReadAuthorizationModelRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ReadAuthorizationModelExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAuthorizationModelExecute'
type MockSdkClient_ReadAuthorizationModelExecute_Call struct {
	*mock.Call
}

// ReadAuthorizationModelExecute is a helper method to define mock.On call
//   - request client.SdkClientReadAuthorizationModelRequestInterface
func (_e *MockSdkClient_Expecter) ReadAuthorizationModelExecute(request interface{}) *MockSdkClient_ReadAuthorizationModelExecute_Call {
	return &MockSdkClient_ReadAuthorizationModelExecute_Call{Call: _e.mock.On("ReadAuthorizationModelExecute", request)}
}

func (_c *MockSdkClient_ReadAuthorizationModelExecute_Call) Run(run func(request client.SdkClientReadAuthorizationModelRequestInterface)) *MockSdkClient_ReadAuthorizationModelExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientReadAuthorizationModelRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientReadAuthorizationModelRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModelExecute_Call) Return(v *client.ClientReadAuthorizationModelResponse, err error) *MockSdkClient_ReadAuthorizationModelExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModelExecute_Call) RunAndReturn(run func(request client.SdkClientReadAuthorizationModelRequestInterface) (*client.ClientReadAuthorizationModelResponse, error)) *MockSdkClient_ReadAuthorizationModelExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAuthorizationModels provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadAuthorizationModels(ctx context.Context) client.SdkClientReadAuthorizationModelsRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadAuthorizationModels")
	}

	var r0 client.SdkClientReadAuthorizationModelsRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientReadAuthorizationModelsRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadAuthorizationModelsRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ReadAuthorizationModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAuthorizationModels'
type MockSdkClient_ReadAuthorizationModels_Call struct {
	*mock.Call
}

// ReadAuthorizationModels is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadAuthorizationModels(ctx interface{}) *MockSdkClient_ReadAuthorizationModels_Call {
	return &MockSdkClient_ReadAuthorizationModels_Call{Call: _e.mock.On("ReadAuthorizationModels", ctx)}
}

func (_c *MockSdkClient_ReadAuthorizationModels_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadAuthorizationModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModels_Call) Return(sdkClientReadAuthorizationModelsRequestInterface client.SdkClientReadAuthorizationModelsRequestInterface) *MockSdkClient_ReadAuthorizationModels_Call {
	_c.Call.Return(sdkClientReadAuthorizationModelsRequestInterface)
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModels_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientReadAuthorizationModelsRequestInterface) *MockSdkClient_ReadAuthorizationModels_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAuthorizationModelsExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadAuthorizationModelsExecute(request client.SdkClientReadAuthorizationModelsRequestInterface) (*client.ClientReadAuthorizationModelsResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadAuthorizationModelsExecute")
	}

	var r0 *client.ClientReadAuthorizationModelsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadAuthorizationModelsRequestInterface) (*client.ClientReadAuthorizationModelsResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadAuthorizationModelsRequestInterface) *client.ClientReadAuthorizationModelsResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadAuthorizationModelsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientReadAuthorizationModelsRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ReadAuthorizationModelsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAuthorizationModelsExecute'
type MockSdkClient_ReadAuthorizationModelsExecute_Call struct {
	*mock.Call
}

// ReadAuthorizationModelsExecute is a helper method to define mock.On call
//   - request client.SdkClientReadAuthorizationModelsRequestInterface
func (_e *MockSdkClient_Expecter) ReadAuthorizationModelsExecute(request interface{}) *MockSdkClient_ReadAuthorizationModelsExecute_Call {
	return &MockSdkClient_ReadAuthorizationModelsExecute_Call{Call: _e.mock.On("ReadAuthorizationModelsExecute", request)}
}

func (_c *MockSdkClient_ReadAuthorizationModelsExecute_Call) Run(run func(request client.SdkClientReadAuthorizationModelsRequestInterface)) *MockSdkClient_ReadAuthorizationModelsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientReadAuthorizationModelsRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientReadAuthorizationModelsRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModelsExecute_Call) Return(v *client.ClientReadAuthorizationModelsResponse, err error) *MockSdkClient_ReadAuthorizationModelsExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModelsExecute_Call) RunAndReturn(run func(request client.SdkClientReadAuthorizationModelsRequestInterface) (*client.ClientReadAuthorizationModelsResponse, error)) *MockSdkClient_ReadAuthorizationModelsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadChanges provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadChanges(ctx context.Context) client.SdkClientReadChangesRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadChanges")
	}

	var r0 client.SdkClientReadChangesRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientReadChangesRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadChangesRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ReadChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadChanges'
type MockSdkClient_ReadChanges_Call struct {
	*mock.Call
}

// ReadChanges is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadChanges(ctx interface{}) *MockSdkClient_ReadChanges_Call {
	return &MockSdkClient_ReadChanges_Call{Call: _e.mock.On("ReadChanges", ctx)}
}

func (_c *MockSdkClient_ReadChanges_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadChanges_Call) Return(sdkClientReadChangesRequestInterface client.SdkClientReadChangesRequestInterface) *MockSdkClient_ReadChanges_Call {
	_c.Call.Return(sdkClientReadChangesRequestInterface)
	return _c
}

func (_c *MockSdkClient_ReadChanges_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientReadChangesRequestInterface) *MockSdkClient_ReadChanges_Call {
	_c.Call.Return(run)
	return _c
}

// ReadChangesExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadChangesExecute(request client.SdkClientReadChangesRequestInterface) (*client.ClientReadChangesResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadChangesExecute")
	}

	var r0 *client.ClientReadChangesResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadChangesRequestInterface) (*client.ClientReadChangesResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadChangesRequestInterface) *client.ClientReadChangesResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadChangesResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientReadChangesRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ReadChangesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadChangesExecute'
type MockSdkClient_ReadChangesExecute_Call struct {
	*mock.Call
}

// ReadChangesExecute is a helper method to define mock.On call
//   - request client.SdkClientReadChangesRequestInterface
func (_e *MockSdkClient_Expecter) ReadChangesExecute(request interface{}) *MockSdkClient_ReadChangesExecute_Call {
	return &MockSdkClient_ReadChangesExecute_Call{Call: _e.mock.On("ReadChangesExecute", request)}
}

func (_c *MockSdkClient_ReadChangesExecute_Call) Run(run func(request client.SdkClientReadChangesRequestInterface)) *MockSdkClient_ReadChangesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientReadChangesRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientReadChangesRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadChangesExecute_Call) Return(v *client.ClientReadChangesResponse, err error) *MockSdkClient_ReadChangesExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ReadChangesExecute_Call) RunAndReturn(run func(request client.SdkClientReadChangesRequestInterface) (*client.ClientReadChangesResponse, error)) *MockSdkClient_ReadChangesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadExecute(request client.SdkClientReadRequestInterface) (*client.ClientReadResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadExecute")
	}

	var r0 *client.ClientReadResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadRequestInterface) (*client.ClientReadResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadRequestInterface) *client.ClientReadResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientReadRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ReadExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadExecute'
type MockSdkClient_ReadExecute_Call struct {
	*mock.Call
}

// ReadExecute is a helper method to define mock.On call
//   - request client.SdkClientReadRequestInterface
func (_e *MockSdkClient_Expecter) ReadExecute(request interface{}) *MockSdkClient_ReadExecute_Call {
	return &MockSdkClient_ReadExecute_Call{Call: _e.mock.On("ReadExecute", request)}
}

func (_c *MockSdkClient_ReadExecute_Call) Run(run func(request client.SdkClientReadRequestInterface)) *MockSdkClient_ReadExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientReadRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientReadRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadExecute_Call) Return(v *client.ClientReadResponse, err error) *MockSdkClient_ReadExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ReadExecute_Call) RunAndReturn(run func(request client.SdkClientReadRequestInterface) (*client.ClientReadResponse, error)) *MockSdkClient_ReadExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLatestAuthorizationModel provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadLatestAuthorizationModel(ctx context.Context) client.SdkClientReadLatestAuthorizationModelRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadLatestAuthorizationModel")
	}

	var r0 client.SdkClientReadLatestAuthorizationModelRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientReadLatestAuthorizationModelRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadLatestAuthorizationModelRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_ReadLatestAuthorizationModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLatestAuthorizationModel'
type MockSdkClient_ReadLatestAuthorizationModel_Call struct {
	*mock.Call
}

// ReadLatestAuthorizationModel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadLatestAuthorizationModel(ctx interface{}) *MockSdkClient_ReadLatestAuthorizationModel_Call {
	return &MockSdkClient_ReadLatestAuthorizationModel_Call{Call: _e.mock.On("ReadLatestAuthorizationModel", ctx)}
}

func (_c *MockSdkClient_ReadLatestAuthorizationModel_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadLatestAuthorizationModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadLatestAuthorizationModel_Call) Return(sdkClientReadLatestAuthorizationModelRequestInterface client.SdkClientReadLatestAuthorizationModelRequestInterface) *MockSdkClient_ReadLatestAuthorizationModel_Call {
	_c.Call.Return(sdkClientReadLatestAuthorizationModelRequestInterface)
	return _c
}

func (_c *MockSdkClient_ReadLatestAuthorizationModel_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientReadLatestAuthorizationModelRequestInterface) *MockSdkClient_ReadLatestAuthorizationModel_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLatestAuthorizationModelExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) ReadLatestAuthorizationModelExecute(request client.SdkClientReadLatestAuthorizationModelRequestInterface) (*client.ClientReadAuthorizationModelResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadLatestAuthorizationModelExecute")
	}

	var r0 *client.ClientReadAuthorizationModelResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadLatestAuthorizationModelRequestInterface) (*client.ClientReadAuthorizationModelResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientReadLatestAuthorizationModelRequestInterface) *client.ClientReadAuthorizationModelResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadAuthorizationModelResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientReadLatestAuthorizationModelRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_ReadLatestAuthorizationModelExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLatestAuthorizationModelExecute'
type MockSdkClient_ReadLatestAuthorizationModelExecute_Call struct {
	*mock.Call
}

// ReadLatestAuthorizationModelExecute is a helper method to define mock.On call
//   - request client.SdkClientReadLatestAuthorizationModelRequestInterface
func (_e *MockSdkClient_Expecter) ReadLatestAuthorizationModelExecute(request interface{}) *MockSdkClient_ReadLatestAuthorizationModelExecute_Call {
	return &MockSdkClient_ReadLatestAuthorizationModelExecute_Call{Call: _e.mock.On("ReadLatestAuthorizationModelExecute", request)}
}

func (_c *MockSdkClient_ReadLatestAuthorizationModelExecute_Call) Run(run func(request client.SdkClientReadLatestAuthorizationModelRequestInterface)) *MockSdkClient_ReadLatestAuthorizationModelExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientReadLatestAuthorizationModelRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientReadLatestAuthorizationModelRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_ReadLatestAuthorizationModelExecute_Call) Return(v *client.ClientReadAuthorizationModelResponse, err error) *MockSdkClient_ReadLatestAuthorizationModelExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_ReadLatestAuthorizationModelExecute_Call) RunAndReturn(run func(request client.SdkClientReadLatestAuthorizationModelRequestInterface) (*client.ClientReadAuthorizationModelResponse, error)) *MockSdkClient_ReadLatestAuthorizationModelExecute_Call {
	_c.Call.Return(run)
	return _c
}

// SetAuthorizationModelId provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) SetAuthorizationModelId(authorizationModelId string) error {
	ret := _mock.Called(authorizationModelId)

	if len(ret) == 0 {
		panic("no return value specified for SetAuthorizationModelId")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(authorizationModelId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSdkClient_SetAuthorizationModelId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetAuthorizationModelId'
type MockSdkClient_SetAuthorizationModelId_Call struct {
	*mock.Call
}

// SetAuthorizationModelId is a helper method to define mock.On call
//   - authorizationModelId string
func (_e *MockSdkClient_Expecter) SetAuthorizationModelId(authorizationModelId interface{}) *MockSdkClient_SetAuthorizationModelId_Call {
	return &MockSdkClient_SetAuthorizationModelId_Call{Call: _e.mock.On("SetAuthorizationModelId", authorizationModelId)}
}

func (_c *MockSdkClient_SetAuthorizationModelId_Call) Run(run func(authorizationModelId string)) *MockSdkClient_SetAuthorizationModelId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_SetAuthorizationModelId_Call) Return(err error) *MockSdkClient_SetAuthorizationModelId_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSdkClient_SetAuthorizationModelId_Call) RunAndReturn(run func(authorizationModelId string) error) *MockSdkClient_SetAuthorizationModelId_Call {
	_c.Call.Return(run)
	return _c
}

// SetStoreId provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) SetStoreId(storeId string) error {
	ret := _mock.Called(storeId)

	if len(ret) == 0 {
		panic("no return value specified for SetStoreId")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(storeId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSdkClient_SetStoreId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetStoreId'
type MockSdkClient_SetStoreId_Call struct {
	*mock.Call
}

// SetStoreId is a helper method to define mock.On call
//   - storeId string
func (_e *MockSdkClient_Expecter) SetStoreId(storeId interface{}) *MockSdkClient_SetStoreId_Call {
	return &MockSdkClient_SetStoreId_Call{Call: _e.mock.On("SetStoreId", storeId)}
}

func (_c *MockSdkClient_SetStoreId_Call) Run(run func(storeId string)) *MockSdkClient_SetStoreId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_SetStoreId_Call) Return(err error) *MockSdkClient_SetStoreId_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSdkClient_SetStoreId_Call) RunAndReturn(run func(storeId string) error) *MockSdkClient_SetStoreId_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) Write(ctx context.Context) client.SdkClientWriteRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 client.SdkClientWriteRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientWriteRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockSdkClient_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) Write(ctx interface{}) *MockSdkClient_Write_Call {
	return &MockSdkClient_Write_Call{Call: _e.mock.On("Write", ctx)}
}

func (_c *MockSdkClient_Write_Call) Run(run func(ctx context.Context)) *MockSdkClient_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_Write_Call) Return(sdkClientWriteRequestInterface client.SdkClientWriteRequestInterface) *MockSdkClient_Write_Call {
	_c.Call.Return(sdkClientWriteRequestInterface)
	return _c
}

func (_c *MockSdkClient_Write_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientWriteRequestInterface) *MockSdkClient_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAssertions provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) WriteAssertions(ctx context.Context) client.SdkClientWriteAssertionsRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WriteAssertions")
	}

	var r0 client.SdkClientWriteAssertionsRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientWriteAssertionsRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteAssertionsRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_WriteAssertions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAssertions'
type MockSdkClient_WriteAssertions_Call struct {
	*mock.Call
}

// WriteAssertions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) WriteAssertions(ctx interface{}) *MockSdkClient_WriteAssertions_Call {
	return &MockSdkClient_WriteAssertions_Call{Call: _e.mock.On("WriteAssertions", ctx)}
}

func (_c *MockSdkClient_WriteAssertions_Call) Run(run func(ctx context.Context)) *MockSdkClient_WriteAssertions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_WriteAssertions_Call) Return(sdkClientWriteAssertionsRequestInterface client.SdkClientWriteAssertionsRequestInterface) *MockSdkClient_WriteAssertions_Call {
	_c.Call.Return(sdkClientWriteAssertionsRequestInterface)
	return _c
}

func (_c *MockSdkClient_WriteAssertions_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientWriteAssertionsRequestInterface) *MockSdkClient_WriteAssertions_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAssertionsExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) WriteAssertionsExecute(request client.SdkClientWriteAssertionsRequestInterface) (*client.ClientWriteAssertionsResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for WriteAssertionsExecute")
	}

	var r0 *client.ClientWriteAssertionsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientWriteAssertionsRequestInterface) (*client.ClientWriteAssertionsResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientWriteAssertionsRequestInterface) *client.ClientWriteAssertionsResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteAssertionsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientWriteAssertionsRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_WriteAssertionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAssertionsExecute'
type MockSdkClient_WriteAssertionsExecute_Call struct {
	*mock.Call
}

// WriteAssertionsExecute is a helper method to define mock.On call
//   - request client.SdkClientWriteAssertionsRequestInterface
func (_e *MockSdkClient_Expecter) WriteAssertionsExecute(request interface{}) *MockSdkClient_WriteAssertionsExecute_Call {
	return &MockSdkClient_WriteAssertionsExecute_Call{Call: _e.mock.On("WriteAssertionsExecute", request)}
}

func (_c *MockSdkClient_WriteAssertionsExecute_Call) Run(run func(request client.SdkClientWriteAssertionsRequestInterface)) *MockSdkClient_WriteAssertionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientWriteAssertionsRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientWriteAssertionsRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_WriteAssertionsExecute_Call) Return(clientWriteAssertionsResponse *client.ClientWriteAssertionsResponse, err error) *MockSdkClient_WriteAssertionsExecute_Call {
	_c.Call.Return(clientWriteAssertionsResponse, err)
	return _c
}

func (_c *MockSdkClient_WriteAssertionsExecute_Call) RunAndReturn(run func(request client.SdkClientWriteAssertionsRequestInterface) (*client.ClientWriteAssertionsResponse, error)) *MockSdkClient_WriteAssertionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAuthorizationModel provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) WriteAuthorizationModel(ctx context.Context) client.SdkClientWriteAuthorizationModelRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WriteAuthorizationModel")
	}

	var r0 client.SdkClientWriteAuthorizationModelRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientWriteAuthorizationModelRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteAuthorizationModelRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_WriteAuthorizationModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAuthorizationModel'
type MockSdkClient_WriteAuthorizationModel_Call struct {
	*mock.Call
}

// WriteAuthorizationModel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) WriteAuthorizationModel(ctx interface{}) *MockSdkClient_WriteAuthorizationModel_Call {
	return &MockSdkClient_WriteAuthorizationModel_Call{Call: _e.mock.On("WriteAuthorizationModel", ctx)}
}

func (_c *MockSdkClient_WriteAuthorizationModel_Call) Run(run func(ctx context.Context)) *MockSdkClient_WriteAuthorizationModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_WriteAuthorizationModel_Call) Return(sdkClientWriteAuthorizationModelRequestInterface client.SdkClientWriteAuthorizationModelRequestInterface) *MockSdkClient_WriteAuthorizationModel_Call {
	_c.Call.Return(sdkClientWriteAuthorizationModelRequestInterface)
	return _c
}

func (_c *MockSdkClient_WriteAuthorizationModel_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientWriteAuthorizationModelRequestInterface) *MockSdkClient_WriteAuthorizationModel_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAuthorizationModelExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) WriteAuthorizationModelExecute(request client.SdkClientWriteAuthorizationModelRequestInterface) (*client.ClientWriteAuthorizationModelResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for WriteAuthorizationModelExecute")
	}

	var r0 *client.ClientWriteAuthorizationModelResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientWriteAuthorizationModelRequestInterface) (*client.ClientWriteAuthorizationModelResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientWriteAuthorizationModelRequestInterface) *client.ClientWriteAuthorizationModelResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteAuthorizationModelResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientWriteAuthorizationModelRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_WriteAuthorizationModelExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAuthorizationModelExecute'
type MockSdkClient_WriteAuthorizationModelExecute_Call struct {
	*mock.Call
}

// WriteAuthorizationModelExecute is a helper method to define mock.On call
//   - request client.SdkClientWriteAuthorizationModelRequestInterface
func (_e *MockSdkClient_Expecter) WriteAuthorizationModelExecute(request interface{}) *MockSdkClient_WriteAuthorizationModelExecute_Call {
	return &MockSdkClient_WriteAuthorizationModelExecute_Call{Call: _e.mock.On("WriteAuthorizationModelExecute", request)}
}

func (_c *MockSdkClient_WriteAuthorizationModelExecute_Call) Run(run func(request client.SdkClientWriteAuthorizationModelRequestInterface)) *MockSdkClient_WriteAuthorizationModelExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientWriteAuthorizationModelRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientWriteAuthorizationModelRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_WriteAuthorizationModelExecute_Call) Return(v *client.ClientWriteAuthorizationModelResponse, err error) *MockSdkClient_WriteAuthorizationModelExecute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClient_WriteAuthorizationModelExecute_Call) RunAndReturn(run func(request client.SdkClientWriteAuthorizationModelRequestInterface) (*client.ClientWriteAuthorizationModelResponse, error)) *MockSdkClient_WriteAuthorizationModelExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WriteExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) WriteExecute(request client.SdkClientWriteRequestInterface) (*client.ClientWriteResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for WriteExecute")
	}

	var r0 *client.ClientWriteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientWriteRequestInterface) (*client.ClientWriteResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientWriteRequestInterface) *client.ClientWriteResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientWriteRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_WriteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteExecute'
type MockSdkClient_WriteExecute_Call struct {
	*mock.Call
}

// WriteExecute is a helper method to define mock.On call
//   - request client.SdkClientWriteRequestInterface
func (_e *MockSdkClient_Expecter) WriteExecute(request interface{}) *MockSdkClient_WriteExecute_Call {
	return &MockSdkClient_WriteExecute_Call{Call: _e.mock.On("WriteExecute", request)}
}

func (_c *MockSdkClient_WriteExecute_Call) Run(run func(request client.SdkClientWriteRequestInterface)) *MockSdkClient_WriteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientWriteRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientWriteRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_WriteExecute_Call) Return(clientWriteResponse *client.ClientWriteResponse, err error) *MockSdkClient_WriteExecute_Call {
	_c.Call.Return(clientWriteResponse, err)
	return _c
}

func (_c *MockSdkClient_WriteExecute_Call) RunAndReturn(run func(request client.SdkClientWriteRequestInterface) (*client.ClientWriteResponse, error)) *MockSdkClient_WriteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTuples provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) WriteTuples(ctx context.Context) client.SdkClientWriteTuplesRequestInterface {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WriteTuples")
	}

	var r0 client.SdkClientWriteTuplesRequestInterface
	if returnFunc, ok := ret.Get(0).(func(context.Context) client.SdkClientWriteTuplesRequestInterface); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteTuplesRequestInterface)
		}
	}
	return r0
}

// MockSdkClient_WriteTuples_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTuples'
type MockSdkClient_WriteTuples_Call struct {
	*mock.Call
}

// WriteTuples is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) WriteTuples(ctx interface{}) *MockSdkClient_WriteTuples_Call {
	return &MockSdkClient_WriteTuples_Call{Call: _e.mock.On("WriteTuples", ctx)}
}

func (_c *MockSdkClient_WriteTuples_Call) Run(run func(ctx context.Context)) *MockSdkClient_WriteTuples_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_WriteTuples_Call) Return(sdkClientWriteTuplesRequestInterface client.SdkClientWriteTuplesRequestInterface) *MockSdkClient_WriteTuples_Call {
	_c.Call.Return(sdkClientWriteTuplesRequestInterface)
	return _c
}

func (_c *MockSdkClient_WriteTuples_Call) RunAndReturn(run func(ctx context.Context) client.SdkClientWriteTuplesRequestInterface) *MockSdkClient_WriteTuples_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTuplesExecute provides a mock function for the type MockSdkClient
func (_mock *MockSdkClient) WriteTuplesExecute(request client.SdkClientWriteTuplesRequestInterface) (*client.ClientWriteResponse, error) {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for WriteTuplesExecute")
	}

	var r0 *client.ClientWriteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientWriteTuplesRequestInterface) (*client.ClientWriteResponse, error)); ok {
		return returnFunc(request)
	}
	if returnFunc, ok := ret.Get(0).(func(client.SdkClientWriteTuplesRequestInterface) *client.ClientWriteResponse); ok {
		r0 = returnFunc(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(client.SdkClientWriteTuplesRequestInterface) error); ok {
		r1 = returnFunc(request)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClient_WriteTuplesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTuplesExecute'
type MockSdkClient_WriteTuplesExecute_Call struct {
	*mock.Call
}

// WriteTuplesExecute is a helper method to define mock.On call
//   - request client.SdkClientWriteTuplesRequestInterface
func (_e *MockSdkClient_Expecter) WriteTuplesExecute(request interface{}) *MockSdkClient_WriteTuplesExecute_Call {
	return &MockSdkClient_WriteTuplesExecute_Call{Call: _e.mock.On("WriteTuplesExecute", request)}
}

func (_c *MockSdkClient_WriteTuplesExecute_Call) Run(run func(request client.SdkClientWriteTuplesRequestInterface)) *MockSdkClient_WriteTuplesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.SdkClientWriteTuplesRequestInterface
		if args[0] != nil {
			arg0 = args[0].(client.SdkClientWriteTuplesRequestInterface)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClient_WriteTuplesExecute_Call) Return(clientWriteResponse *client.ClientWriteResponse, err error) *MockSdkClient_WriteTuplesExecute_Call {
	_c.Call.Return(clientWriteResponse, err)
	return _c
}

func (_c *MockSdkClient_WriteTuplesExecute_Call) RunAndReturn(run func(request client.SdkClientWriteTuplesRequestInterface) (*client.ClientWriteResponse, error)) *MockSdkClient_WriteTuplesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientReadAuthorizationModelRequestInterface creates a new instance of MockSdkClientReadAuthorizationModelRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientReadAuthorizationModelRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientReadAuthorizationModelRequestInterface {
	mock := &MockSdkClientReadAuthorizationModelRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSdkClientReadAuthorizationModelRequestInterface is an autogenerated mock type for the SdkClientReadAuthorizationModelRequestInterface type
type MockSdkClientReadAuthorizationModelRequestInterface struct {
	mock.Mock
}

type MockSdkClientReadAuthorizationModelRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientReadAuthorizationModelRequestInterface) EXPECT() *MockSdkClientReadAuthorizationModelRequestInterface_Expecter {
	return &MockSdkClientReadAuthorizationModelRequestInterface_Expecter{mock: &_m.Mock}
}

// Body provides a mock function for the type MockSdkClientReadAuthorizationModelRequestInterface
func (_mock *MockSdkClientReadAuthorizationModelRequestInterface) Body(body client.ClientReadAuthorizationModelRequest) client.SdkClientReadAuthorizationModelRequestInterface {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 client.SdkClientReadAuthorizationModelRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientReadAuthorizationModelRequest) client.SdkClientReadAuthorizationModelRequestInterface); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadAuthorizationModelRequestInterface)
		}
	}
	return r0
}

// MockSdkClientReadAuthorizationModelRequestInterface_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type MockSdkClientReadAuthorizationModelRequestInterface_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - body client.ClientReadAuthorizationModelRequest
func (_e *MockSdkClientReadAuthorizationModelRequestInterface_Expecter) Body(body interface{}) *MockSdkClientReadAuthorizationModelRequestInterface_Body_Call {
	return &MockSdkClientReadAuthorizationModelRequestInterface_Body_Call{Call: _e.mock.On("Body", body)}
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_Body_Call) Run(run func(body client.ClientReadAuthorizationModelRequest)) *MockSdkClientReadAuthorizationModelRequestInterface_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientReadAuthorizationModelRequest
		if args[0] != nil {
			arg0 = args[0].(client.ClientReadAuthorizationModelRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_Body_Call) Return(sdkClientReadAuthorizationModelRequestInterface client.SdkClientReadAuthorizationModelRequestInterface) *MockSdkClientReadAuthorizationModelRequestInterface_Body_Call {
	_c.Call.Return(sdkClientReadAuthorizationModelRequestInterface)
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_Body_Call) RunAndReturn(run func(body client.ClientReadAuthorizationModelRequest) client.SdkClientReadAuthorizationModelRequestInterface) *MockSdkClientReadAuthorizationModelRequestInterface_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockSdkClientReadAuthorizationModelRequestInterface
func (_mock *MockSdkClientReadAuthorizationModelRequestInterface) Execute() (*client.ClientReadAuthorizationModelResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *client.ClientReadAuthorizationModelResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*client.ClientReadAuthorizationModelResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *client.ClientReadAuthorizationModelResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadAuthorizationModelResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientReadAuthorizationModelRequestInterface_Expecter) Execute() *MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call {
	return &MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call) Run(run func()) *MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call) Return(v *client.ClientReadAuthorizationModelResponse, err error) *MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call) RunAndReturn(run func() (*client.ClientReadAuthorizationModelResponse, error)) *MockSdkClientReadAuthorizationModelRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizationModelIdOverride provides a mock function for the type MockSdkClientReadAuthorizationModelRequestInterface
func (_mock *MockSdkClientReadAuthorizationModelRequestInterface) GetAuthorizationModelIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationModelIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationModelIdOverride'
type MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call struct {
	*mock.Call
}

// GetAuthorizationModelIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientReadAuthorizationModelRequestInterface_Expecter) GetAuthorizationModelIdOverride() *MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call {
	return &MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call{Call: _e.mock.On("GetAuthorizationModelIdOverride")}
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call) Run(run func()) *MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call) Return(s *string) *MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientReadAuthorizationModelRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GetBody provides a mock function for the type MockSdkClientReadAuthorizationModelRequestInterface
func (_mock *MockSdkClientReadAuthorizationModelRequestInterface) GetBody() *client.ClientReadAuthorizationModelRequest {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 *client.ClientReadAuthorizationModelRequest
	if returnFunc, ok := ret.Get(0).(func() *client.ClientReadAuthorizationModelRequest); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadAuthorizationModelRequest)
		}
	}
	return r0
}

// MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *MockSdkClientReadAuthorizationModelRequestInterface_Expecter) GetBody() *MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call {
	return &MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call) Run(run func()) *MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call) Return(clientReadAuthorizationModelRequest *client.ClientReadAuthorizationModelRequest) *MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call {
	_c.Call.Return(clientReadAuthorizationModelRequest)
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call) RunAndReturn(run func() *client.ClientReadAuthorizationModelRequest) *MockSdkClientReadAuthorizationModelRequestInterface_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockSdkClientReadAuthorizationModelRequestInterface
func (_mock *MockSdkClientReadAuthorizationModelRequestInterface) GetContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientReadAuthorizationModelRequestInterface_Expecter) GetContext() *MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call {
	return &MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call) Return(context1 context.Context) *MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientReadAuthorizationModelRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function for the type MockSdkClientReadAuthorizationModelRequestInterface
func (_mock *MockSdkClientReadAuthorizationModelRequestInterface) GetOptions() *client.ClientReadAuthorizationModelOptions {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.ClientReadAuthorizationModelOptions
	if returnFunc, ok := ret.Get(0).(func() *client.ClientReadAuthorizationModelOptions); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadAuthorizationModelOptions)
		}
	}
	return r0
}

// MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientReadAuthorizationModelRequestInterface_Expecter) GetOptions() *MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call {
	return &MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call) Return(clientReadAuthorizationModelOptions *client.ClientReadAuthorizationModelOptions) *MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call {
	_c.Call.Return(clientReadAuthorizationModelOptions)
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.ClientReadAuthorizationModelOptions) *MockSdkClientReadAuthorizationModelRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreIdOverride provides a mock function for the type MockSdkClientReadAuthorizationModelRequestInterface
func (_mock *MockSdkClientReadAuthorizationModelRequestInterface) GetStoreIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreIdOverride'
type MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call struct {
	*mock.Call
}

// GetStoreIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientReadAuthorizationModelRequestInterface_Expecter) GetStoreIdOverride() *MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call {
	return &MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call{Call: _e.mock.On("GetStoreIdOverride")}
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call) Run(run func()) *MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call) Return(s *string) *MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientReadAuthorizationModelRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function for the type MockSdkClientReadAuthorizationModelRequestInterface
func (_mock *MockSdkClientReadAuthorizationModelRequestInterface) Options(options client.ClientReadAuthorizationModelOptions) client.SdkClientReadAuthorizationModelRequestInterface {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientReadAuthorizationModelRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientReadAuthorizationModelOptions) client.SdkClientReadAuthorizationModelRequestInterface); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadAuthorizationModelRequestInterface)
		}
	}
	return r0
}

// MockSdkClientReadAuthorizationModelRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientReadAuthorizationModelRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.ClientReadAuthorizationModelOptions
func (_e *MockSdkClientReadAuthorizationModelRequestInterface_Expecter) Options(options interface{}) *MockSdkClientReadAuthorizationModelRequestInterface_Options_Call {
	return &MockSdkClientReadAuthorizationModelRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_Options_Call) Run(run func(options client.ClientReadAuthorizationModelOptions)) *MockSdkClientReadAuthorizationModelRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientReadAuthorizationModelOptions
		if args[0] != nil {
			arg0 = args[0].(client.ClientReadAuthorizationModelOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_Options_Call) Return(sdkClientReadAuthorizationModelRequestInterface client.SdkClientReadAuthorizationModelRequestInterface) *MockSdkClientReadAuthorizationModelRequestInterface_Options_Call {
	_c.Call.Return(sdkClientReadAuthorizationModelRequestInterface)
	return _c
}

func (_c *MockSdkClientReadAuthorizationModelRequestInterface_Options_Call) RunAndReturn(run func(options client.ClientReadAuthorizationModelOptions) client.SdkClientReadAuthorizationModelRequestInterface) *MockSdkClientReadAuthorizationModelRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientReadRequestInterface creates a new instance of MockSdkClientReadRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientReadRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientReadRequestInterface {
	mock := &MockSdkClientReadRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSdkClientReadRequestInterface is an autogenerated mock type for the SdkClientReadRequestInterface type
type MockSdkClientReadRequestInterface struct {
	mock.Mock
}

type MockSdkClientReadRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientReadRequestInterface) EXPECT() *MockSdkClientReadRequestInterface_Expecter {
	return &MockSdkClientReadRequestInterface_Expecter{mock: &_m.Mock}
}

// Body provides a mock function for the type MockSdkClientReadRequestInterface
func (_mock *MockSdkClientReadRequestInterface) Body(body client.ClientReadRequest) client.SdkClientReadRequestInterface {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 client.SdkClientReadRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientReadRequest) client.SdkClientReadRequestInterface); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadRequestInterface)
		}
	}
	return r0
}

// MockSdkClientReadRequestInterface_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type MockSdkClientReadRequestInterface_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - body client.ClientReadRequest
func (_e *MockSdkClientReadRequestInterface_Expecter) Body(body interface{}) *MockSdkClientReadRequestInterface_Body_Call {
	return &MockSdkClientReadRequestInterface_Body_Call{Call: _e.mock.On("Body", body)}
}

func (_c *MockSdkClientReadRequestInterface_Body_Call) Run(run func(body client.ClientReadRequest)) *MockSdkClientReadRequestInterface_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientReadRequest
		if args[0] != nil {
			arg0 = args[0].(client.ClientReadRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientReadRequestInterface_Body_Call) Return(sdkClientReadRequestInterface client.SdkClientReadRequestInterface) *MockSdkClientReadRequestInterface_Body_Call {
	_c.Call.Return(sdkClientReadRequestInterface)
	return _c
}

func (_c *MockSdkClientReadRequestInterface_Body_Call) RunAndReturn(run func(body client.ClientReadRequest) client.SdkClientReadRequestInterface) *MockSdkClientReadRequestInterface_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockSdkClientReadRequestInterface
func (_mock *MockSdkClientReadRequestInterface) Execute() (*client.ClientReadResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *client.ClientReadResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*client.ClientReadResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *client.ClientReadResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClientReadRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientReadRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientReadRequestInterface_Expecter) Execute() *MockSdkClientReadRequestInterface_Execute_Call {
	return &MockSdkClientReadRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientReadRequestInterface_Execute_Call) Run(run func()) *MockSdkClientReadRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadRequestInterface_Execute_Call) Return(v *client.ClientReadResponse, err error) *MockSdkClientReadRequestInterface_Execute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClientReadRequestInterface_Execute_Call) RunAndReturn(run func() (*client.ClientReadResponse, error)) *MockSdkClientReadRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetBody provides a mock function for the type MockSdkClientReadRequestInterface
func (_mock *MockSdkClientReadRequestInterface) GetBody() *client.ClientReadRequest {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 *client.ClientReadRequest
	if returnFunc, ok := ret.Get(0).(func() *client.ClientReadRequest); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadRequest)
		}
	}
	return r0
}

// MockSdkClientReadRequestInterface_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type MockSdkClientReadRequestInterface_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *MockSdkClientReadRequestInterface_Expecter) GetBody() *MockSdkClientReadRequestInterface_GetBody_Call {
	return &MockSdkClientReadRequestInterface_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *MockSdkClientReadRequestInterface_GetBody_Call) Run(run func()) *MockSdkClientReadRequestInterface_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadRequestInterface_GetBody_Call) Return(clientReadRequest *client.ClientReadRequest) *MockSdkClientReadRequestInterface_GetBody_Call {
	_c.Call.Return(clientReadRequest)
	return _c
}

func (_c *MockSdkClientReadRequestInterface_GetBody_Call) RunAndReturn(run func() *client.ClientReadRequest) *MockSdkClientReadRequestInterface_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockSdkClientReadRequestInterface
func (_mock *MockSdkClientReadRequestInterface) GetContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockSdkClientReadRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientReadRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientReadRequestInterface_Expecter) GetContext() *MockSdkClientReadRequestInterface_GetContext_Call {
	return &MockSdkClientReadRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientReadRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientReadRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadRequestInterface_GetContext_Call) Return(context1 context.Context) *MockSdkClientReadRequestInterface_GetContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockSdkClientReadRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientReadRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function for the type MockSdkClientReadRequestInterface
func (_mock *MockSdkClientReadRequestInterface) GetOptions() *client.ClientReadOptions {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.ClientReadOptions
	if returnFunc, ok := ret.Get(0).(func() *client.ClientReadOptions); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientReadOptions)
		}
	}
	return r0
}

// MockSdkClientReadRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientReadRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientReadRequestInterface_Expecter) GetOptions() *MockSdkClientReadRequestInterface_GetOptions_Call {
	return &MockSdkClientReadRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientReadRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientReadRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadRequestInterface_GetOptions_Call) Return(clientReadOptions *client.ClientReadOptions) *MockSdkClientReadRequestInterface_GetOptions_Call {
	_c.Call.Return(clientReadOptions)
	return _c
}

func (_c *MockSdkClientReadRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.ClientReadOptions) *MockSdkClientReadRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreIdOverride provides a mock function for the type MockSdkClientReadRequestInterface
func (_mock *MockSdkClientReadRequestInterface) GetStoreIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientReadRequestInterface_GetStoreIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreIdOverride'
type MockSdkClientReadRequestInterface_GetStoreIdOverride_Call struct {
	*mock.Call
}

// GetStoreIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientReadRequestInterface_Expecter) GetStoreIdOverride() *MockSdkClientReadRequestInterface_GetStoreIdOverride_Call {
	return &MockSdkClientReadRequestInterface_GetStoreIdOverride_Call{Call: _e.mock.On("GetStoreIdOverride")}
}

func (_c *MockSdkClientReadRequestInterface_GetStoreIdOverride_Call) Run(run func()) *MockSdkClientReadRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientReadRequestInterface_GetStoreIdOverride_Call) Return(s *string) *MockSdkClientReadRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientReadRequestInterface_GetStoreIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientReadRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function for the type MockSdkClientReadRequestInterface
func (_mock *MockSdkClientReadRequestInterface) Options(options client.ClientReadOptions) client.SdkClientReadRequestInterface {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientReadRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientReadOptions) client.SdkClientReadRequestInterface); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadRequestInterface)
		}
	}
	return r0
}

// MockSdkClientReadRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientReadRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.ClientReadOptions
func (_e *MockSdkClientReadRequestInterface_Expecter) Options(options interface{}) *MockSdkClientReadRequestInterface_Options_Call {
	return &MockSdkClientReadRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientReadRequestInterface_Options_Call) Run(run func(options client.ClientReadOptions)) *MockSdkClientReadRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientReadOptions
		if args[0] != nil {
			arg0 = args[0].(client.ClientReadOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientReadRequestInterface_Options_Call) Return(sdkClientReadRequestInterface client.SdkClientReadRequestInterface) *MockSdkClientReadRequestInterface_Options_Call {
	_c.Call.Return(sdkClientReadRequestInterface)
	return _c
}

func (_c *MockSdkClientReadRequestInterface_Options_Call) RunAndReturn(run func(options client.ClientReadOptions) client.SdkClientReadRequestInterface) *MockSdkClientReadRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientWriteRequestInterface creates a new instance of MockSdkClientWriteRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientWriteRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientWriteRequestInterface {
	mock := &MockSdkClientWriteRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSdkClientWriteRequestInterface is an autogenerated mock type for the SdkClientWriteRequestInterface type
type MockSdkClientWriteRequestInterface struct {
	mock.Mock
}

type MockSdkClientWriteRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientWriteRequestInterface) EXPECT() *MockSdkClientWriteRequestInterface_Expecter {
	return &MockSdkClientWriteRequestInterface_Expecter{mock: &_m.Mock}
}

// Body provides a mock function for the type MockSdkClientWriteRequestInterface
func (_mock *MockSdkClientWriteRequestInterface) Body(body client.ClientWriteRequest) client.SdkClientWriteRequestInterface {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 client.SdkClientWriteRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientWriteRequest) client.SdkClientWriteRequestInterface); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteRequestInterface)
		}
	}
	return r0
}

// MockSdkClientWriteRequestInterface_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type MockSdkClientWriteRequestInterface_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - body client.ClientWriteRequest
func (_e *MockSdkClientWriteRequestInterface_Expecter) Body(body interface{}) *MockSdkClientWriteRequestInterface_Body_Call {
	return &MockSdkClientWriteRequestInterface_Body_Call{Call: _e.mock.On("Body", body)}
}

func (_c *MockSdkClientWriteRequestInterface_Body_Call) Run(run func(body client.ClientWriteRequest)) *MockSdkClientWriteRequestInterface_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientWriteRequest
		if args[0] != nil {
			arg0 = args[0].(client.ClientWriteRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_Body_Call) Return(sdkClientWriteRequestInterface client.SdkClientWriteRequestInterface) *MockSdkClientWriteRequestInterface_Body_Call {
	_c.Call.Return(sdkClientWriteRequestInterface)
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_Body_Call) RunAndReturn(run func(body client.ClientWriteRequest) client.SdkClientWriteRequestInterface) *MockSdkClientWriteRequestInterface_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockSdkClientWriteRequestInterface
func (_mock *MockSdkClientWriteRequestInterface) Execute() (*client.ClientWriteResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *client.ClientWriteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*client.ClientWriteResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *client.ClientWriteResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClientWriteRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientWriteRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientWriteRequestInterface_Expecter) Execute() *MockSdkClientWriteRequestInterface_Execute_Call {
	return &MockSdkClientWriteRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientWriteRequestInterface_Execute_Call) Run(run func()) *MockSdkClientWriteRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_Execute_Call) Return(clientWriteResponse *client.ClientWriteResponse, err error) *MockSdkClientWriteRequestInterface_Execute_Call {
	_c.Call.Return(clientWriteResponse, err)
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_Execute_Call) RunAndReturn(run func() (*client.ClientWriteResponse, error)) *MockSdkClientWriteRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizationModelIdOverride provides a mock function for the type MockSdkClientWriteRequestInterface
func (_mock *MockSdkClientWriteRequestInterface) GetAuthorizationModelIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationModelIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationModelIdOverride'
type MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call struct {
	*mock.Call
}

// GetAuthorizationModelIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientWriteRequestInterface_Expecter) GetAuthorizationModelIdOverride() *MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call {
	return &MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call{Call: _e.mock.On("GetAuthorizationModelIdOverride")}
}

func (_c *MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call) Run(run func()) *MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call) Return(s *string) *MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientWriteRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GetBody provides a mock function for the type MockSdkClientWriteRequestInterface
func (_mock *MockSdkClientWriteRequestInterface) GetBody() *client.ClientWriteRequest {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 *client.ClientWriteRequest
	if returnFunc, ok := ret.Get(0).(func() *client.ClientWriteRequest); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteRequest)
		}
	}
	return r0
}

// MockSdkClientWriteRequestInterface_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type MockSdkClientWriteRequestInterface_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *MockSdkClientWriteRequestInterface_Expecter) GetBody() *MockSdkClientWriteRequestInterface_GetBody_Call {
	return &MockSdkClientWriteRequestInterface_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *MockSdkClientWriteRequestInterface_GetBody_Call) Run(run func()) *MockSdkClientWriteRequestInterface_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetBody_Call) Return(clientWriteRequest *client.ClientWriteRequest) *MockSdkClientWriteRequestInterface_GetBody_Call {
	_c.Call.Return(clientWriteRequest)
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetBody_Call) RunAndReturn(run func() *client.ClientWriteRequest) *MockSdkClientWriteRequestInterface_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockSdkClientWriteRequestInterface
func (_mock *MockSdkClientWriteRequestInterface) GetContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockSdkClientWriteRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientWriteRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientWriteRequestInterface_Expecter) GetContext() *MockSdkClientWriteRequestInterface_GetContext_Call {
	return &MockSdkClientWriteRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientWriteRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientWriteRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetContext_Call) Return(context1 context.Context) *MockSdkClientWriteRequestInterface_GetContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientWriteRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function for the type MockSdkClientWriteRequestInterface
func (_mock *MockSdkClientWriteRequestInterface) GetOptions() *client.ClientWriteOptions {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.ClientWriteOptions
	if returnFunc, ok := ret.Get(0).(func() *client.ClientWriteOptions); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteOptions)
		}
	}
	return r0
}

// MockSdkClientWriteRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientWriteRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientWriteRequestInterface_Expecter) GetOptions() *MockSdkClientWriteRequestInterface_GetOptions_Call {
	return &MockSdkClientWriteRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientWriteRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientWriteRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetOptions_Call) Return(clientWriteOptions *client.ClientWriteOptions) *MockSdkClientWriteRequestInterface_GetOptions_Call {
	_c.Call.Return(clientWriteOptions)
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.ClientWriteOptions) *MockSdkClientWriteRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreIdOverride provides a mock function for the type MockSdkClientWriteRequestInterface
func (_mock *MockSdkClientWriteRequestInterface) GetStoreIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreIdOverride'
type MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call struct {
	*mock.Call
}

// GetStoreIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientWriteRequestInterface_Expecter) GetStoreIdOverride() *MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call {
	return &MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call{Call: _e.mock.On("GetStoreIdOverride")}
}

func (_c *MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call) Run(run func()) *MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call) Return(s *string) *MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientWriteRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function for the type MockSdkClientWriteRequestInterface
func (_mock *MockSdkClientWriteRequestInterface) Options(options client.ClientWriteOptions) client.SdkClientWriteRequestInterface {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientWriteRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientWriteOptions) client.SdkClientWriteRequestInterface); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteRequestInterface)
		}
	}
	return r0
}

// MockSdkClientWriteRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientWriteRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.ClientWriteOptions
func (_e *MockSdkClientWriteRequestInterface_Expecter) Options(options interface{}) *MockSdkClientWriteRequestInterface_Options_Call {
	return &MockSdkClientWriteRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientWriteRequestInterface_Options_Call) Run(run func(options client.ClientWriteOptions)) *MockSdkClientWriteRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientWriteOptions
		if args[0] != nil {
			arg0 = args[0].(client.ClientWriteOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_Options_Call) Return(sdkClientWriteRequestInterface client.SdkClientWriteRequestInterface) *MockSdkClientWriteRequestInterface_Options_Call {
	_c.Call.Return(sdkClientWriteRequestInterface)
	return _c
}

func (_c *MockSdkClientWriteRequestInterface_Options_Call) RunAndReturn(run func(options client.ClientWriteOptions) client.SdkClientWriteRequestInterface) *MockSdkClientWriteRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientDeleteTuplesRequestInterface creates a new instance of MockSdkClientDeleteTuplesRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientDeleteTuplesRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientDeleteTuplesRequestInterface {
	mock := &MockSdkClientDeleteTuplesRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSdkClientDeleteTuplesRequestInterface is an autogenerated mock type for the SdkClientDeleteTuplesRequestInterface type
type MockSdkClientDeleteTuplesRequestInterface struct {
	mock.Mock
}

type MockSdkClientDeleteTuplesRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientDeleteTuplesRequestInterface) EXPECT() *MockSdkClientDeleteTuplesRequestInterface_Expecter {
	return &MockSdkClientDeleteTuplesRequestInterface_Expecter{mock: &_m.Mock}
}

// Body provides a mock function for the type MockSdkClientDeleteTuplesRequestInterface
func (_mock *MockSdkClientDeleteTuplesRequestInterface) Body(body client.ClientDeleteTuplesBody) client.SdkClientDeleteTuplesRequestInterface {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 client.SdkClientDeleteTuplesRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientDeleteTuplesBody) client.SdkClientDeleteTuplesRequestInterface); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientDeleteTuplesRequestInterface)
		}
	}
	return r0
}

// MockSdkClientDeleteTuplesRequestInterface_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type MockSdkClientDeleteTuplesRequestInterface_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - body client.ClientDeleteTuplesBody
func (_e *MockSdkClientDeleteTuplesRequestInterface_Expecter) Body(body interface{}) *MockSdkClientDeleteTuplesRequestInterface_Body_Call {
	return &MockSdkClientDeleteTuplesRequestInterface_Body_Call{Call: _e.mock.On("Body", body)}
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_Body_Call) Run(run func(body client.ClientDeleteTuplesBody)) *MockSdkClientDeleteTuplesRequestInterface_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientDeleteTuplesBody
		if args[0] != nil {
			arg0 = args[0].(client.ClientDeleteTuplesBody)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_Body_Call) Return(sdkClientDeleteTuplesRequestInterface client.SdkClientDeleteTuplesRequestInterface) *MockSdkClientDeleteTuplesRequestInterface_Body_Call {
	_c.Call.Return(sdkClientDeleteTuplesRequestInterface)
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_Body_Call) RunAndReturn(run func(body client.ClientDeleteTuplesBody) client.SdkClientDeleteTuplesRequestInterface) *MockSdkClientDeleteTuplesRequestInterface_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockSdkClientDeleteTuplesRequestInterface
func (_mock *MockSdkClientDeleteTuplesRequestInterface) Execute() (*client.ClientWriteResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *client.ClientWriteResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*client.ClientWriteResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *client.ClientWriteResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClientDeleteTuplesRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientDeleteTuplesRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientDeleteTuplesRequestInterface_Expecter) Execute() *MockSdkClientDeleteTuplesRequestInterface_Execute_Call {
	return &MockSdkClientDeleteTuplesRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_Execute_Call) Run(run func()) *MockSdkClientDeleteTuplesRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_Execute_Call) Return(clientWriteResponse *client.ClientWriteResponse, err error) *MockSdkClientDeleteTuplesRequestInterface_Execute_Call {
	_c.Call.Return(clientWriteResponse, err)
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_Execute_Call) RunAndReturn(run func() (*client.ClientWriteResponse, error)) *MockSdkClientDeleteTuplesRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetBody provides a mock function for the type MockSdkClientDeleteTuplesRequestInterface
func (_mock *MockSdkClientDeleteTuplesRequestInterface) GetBody() *client.ClientDeleteTuplesBody {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 *client.ClientDeleteTuplesBody
	if returnFunc, ok := ret.Get(0).(func() *client.ClientDeleteTuplesBody); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientDeleteTuplesBody)
		}
	}
	return r0
}

// MockSdkClientDeleteTuplesRequestInterface_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type MockSdkClientDeleteTuplesRequestInterface_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *MockSdkClientDeleteTuplesRequestInterface_Expecter) GetBody() *MockSdkClientDeleteTuplesRequestInterface_GetBody_Call {
	return &MockSdkClientDeleteTuplesRequestInterface_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_GetBody_Call) Run(run func()) *MockSdkClientDeleteTuplesRequestInterface_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_GetBody_Call) Return(v *client.ClientDeleteTuplesBody) *MockSdkClientDeleteTuplesRequestInterface_GetBody_Call {
	_c.Call.Return(v)
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_GetBody_Call) RunAndReturn(run func() *client.ClientDeleteTuplesBody) *MockSdkClientDeleteTuplesRequestInterface_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockSdkClientDeleteTuplesRequestInterface
func (_mock *MockSdkClientDeleteTuplesRequestInterface) GetContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockSdkClientDeleteTuplesRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientDeleteTuplesRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientDeleteTuplesRequestInterface_Expecter) GetContext() *MockSdkClientDeleteTuplesRequestInterface_GetContext_Call {
	return &MockSdkClientDeleteTuplesRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientDeleteTuplesRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_GetContext_Call) Return(context1 context.Context) *MockSdkClientDeleteTuplesRequestInterface_GetContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientDeleteTuplesRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function for the type MockSdkClientDeleteTuplesRequestInterface
func (_mock *MockSdkClientDeleteTuplesRequestInterface) GetOptions() *client.ClientWriteOptions {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.ClientWriteOptions
	if returnFunc, ok := ret.Get(0).(func() *client.ClientWriteOptions); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteOptions)
		}
	}
	return r0
}

// MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientDeleteTuplesRequestInterface_Expecter) GetOptions() *MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call {
	return &MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call) Return(clientWriteOptions *client.ClientWriteOptions) *MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call {
	_c.Call.Return(clientWriteOptions)
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.ClientWriteOptions) *MockSdkClientDeleteTuplesRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function for the type MockSdkClientDeleteTuplesRequestInterface
func (_mock *MockSdkClientDeleteTuplesRequestInterface) Options(options client.ClientWriteOptions) client.SdkClientDeleteTuplesRequestInterface {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientDeleteTuplesRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientWriteOptions) client.SdkClientDeleteTuplesRequestInterface); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientDeleteTuplesRequestInterface)
		}
	}
	return r0
}

// MockSdkClientDeleteTuplesRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientDeleteTuplesRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.ClientWriteOptions
func (_e *MockSdkClientDeleteTuplesRequestInterface_Expecter) Options(options interface{}) *MockSdkClientDeleteTuplesRequestInterface_Options_Call {
	return &MockSdkClientDeleteTuplesRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_Options_Call) Run(run func(options client.ClientWriteOptions)) *MockSdkClientDeleteTuplesRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientWriteOptions
		if args[0] != nil {
			arg0 = args[0].(client.ClientWriteOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_Options_Call) Return(sdkClientDeleteTuplesRequestInterface client.SdkClientDeleteTuplesRequestInterface) *MockSdkClientDeleteTuplesRequestInterface_Options_Call {
	_c.Call.Return(sdkClientDeleteTuplesRequestInterface)
	return _c
}

func (_c *MockSdkClientDeleteTuplesRequestInterface_Options_Call) RunAndReturn(run func(options client.ClientWriteOptions) client.SdkClientDeleteTuplesRequestInterface) *MockSdkClientDeleteTuplesRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientCheckRequestInterface creates a new instance of MockSdkClientCheckRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientCheckRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientCheckRequestInterface {
	mock := &MockSdkClientCheckRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSdkClientCheckRequestInterface is an autogenerated mock type for the SdkClientCheckRequestInterface type
type MockSdkClientCheckRequestInterface struct {
	mock.Mock
}

type MockSdkClientCheckRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientCheckRequestInterface) EXPECT() *MockSdkClientCheckRequestInterface_Expecter {
	return &MockSdkClientCheckRequestInterface_Expecter{mock: &_m.Mock}
}

// Body provides a mock function for the type MockSdkClientCheckRequestInterface
func (_mock *MockSdkClientCheckRequestInterface) Body(body client.ClientCheckRequest) client.SdkClientCheckRequestInterface {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 client.SdkClientCheckRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientCheckRequest) client.SdkClientCheckRequestInterface); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientCheckRequestInterface)
		}
	}
	return r0
}

// MockSdkClientCheckRequestInterface_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type MockSdkClientCheckRequestInterface_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - body client.ClientCheckRequest
func (_e *MockSdkClientCheckRequestInterface_Expecter) Body(body interface{}) *MockSdkClientCheckRequestInterface_Body_Call {
	return &MockSdkClientCheckRequestInterface_Body_Call{Call: _e.mock.On("Body", body)}
}

func (_c *MockSdkClientCheckRequestInterface_Body_Call) Run(run func(body client.ClientCheckRequest)) *MockSdkClientCheckRequestInterface_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientCheckRequest
		if args[0] != nil {
			arg0 = args[0].(client.ClientCheckRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_Body_Call) Return(sdkClientCheckRequestInterface client.SdkClientCheckRequestInterface) *MockSdkClientCheckRequestInterface_Body_Call {
	_c.Call.Return(sdkClientCheckRequestInterface)
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_Body_Call) RunAndReturn(run func(body client.ClientCheckRequest) client.SdkClientCheckRequestInterface) *MockSdkClientCheckRequestInterface_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockSdkClientCheckRequestInterface
func (_mock *MockSdkClientCheckRequestInterface) Execute() (*client.ClientCheckResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *client.ClientCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*client.ClientCheckResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *client.ClientCheckResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClientCheckRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientCheckRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientCheckRequestInterface_Expecter) Execute() *MockSdkClientCheckRequestInterface_Execute_Call {
	return &MockSdkClientCheckRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientCheckRequestInterface_Execute_Call) Run(run func()) *MockSdkClientCheckRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_Execute_Call) Return(clientCheckResponse *client.ClientCheckResponse, err error) *MockSdkClientCheckRequestInterface_Execute_Call {
	_c.Call.Return(clientCheckResponse, err)
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_Execute_Call) RunAndReturn(run func() (*client.ClientCheckResponse, error)) *MockSdkClientCheckRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizationModelIdOverride provides a mock function for the type MockSdkClientCheckRequestInterface
func (_mock *MockSdkClientCheckRequestInterface) GetAuthorizationModelIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationModelIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationModelIdOverride'
type MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call struct {
	*mock.Call
}

// GetAuthorizationModelIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientCheckRequestInterface_Expecter) GetAuthorizationModelIdOverride() *MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call {
	return &MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call{Call: _e.mock.On("GetAuthorizationModelIdOverride")}
}

func (_c *MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call) Run(run func()) *MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call) Return(s *string) *MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientCheckRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GetBody provides a mock function for the type MockSdkClientCheckRequestInterface
func (_mock *MockSdkClientCheckRequestInterface) GetBody() *client.ClientCheckRequest {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 *client.ClientCheckRequest
	if returnFunc, ok := ret.Get(0).(func() *client.ClientCheckRequest); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientCheckRequest)
		}
	}
	return r0
}

// MockSdkClientCheckRequestInterface_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type MockSdkClientCheckRequestInterface_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *MockSdkClientCheckRequestInterface_Expecter) GetBody() *MockSdkClientCheckRequestInterface_GetBody_Call {
	return &MockSdkClientCheckRequestInterface_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *MockSdkClientCheckRequestInterface_GetBody_Call) Run(run func()) *MockSdkClientCheckRequestInterface_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetBody_Call) Return(clientCheckRequest *client.ClientCheckRequest) *MockSdkClientCheckRequestInterface_GetBody_Call {
	_c.Call.Return(clientCheckRequest)
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetBody_Call) RunAndReturn(run func() *client.ClientCheckRequest) *MockSdkClientCheckRequestInterface_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockSdkClientCheckRequestInterface
func (_mock *MockSdkClientCheckRequestInterface) GetContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockSdkClientCheckRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientCheckRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientCheckRequestInterface_Expecter) GetContext() *MockSdkClientCheckRequestInterface_GetContext_Call {
	return &MockSdkClientCheckRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientCheckRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientCheckRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetContext_Call) Return(context1 context.Context) *MockSdkClientCheckRequestInterface_GetContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientCheckRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function for the type MockSdkClientCheckRequestInterface
func (_mock *MockSdkClientCheckRequestInterface) GetOptions() *client.ClientCheckOptions {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.ClientCheckOptions
	if returnFunc, ok := ret.Get(0).(func() *client.ClientCheckOptions); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientCheckOptions)
		}
	}
	return r0
}

// MockSdkClientCheckRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientCheckRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientCheckRequestInterface_Expecter) GetOptions() *MockSdkClientCheckRequestInterface_GetOptions_Call {
	return &MockSdkClientCheckRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientCheckRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientCheckRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetOptions_Call) Return(clientCheckOptions *client.ClientCheckOptions) *MockSdkClientCheckRequestInterface_GetOptions_Call {
	_c.Call.Return(clientCheckOptions)
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.ClientCheckOptions) *MockSdkClientCheckRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreIdOverride provides a mock function for the type MockSdkClientCheckRequestInterface
func (_mock *MockSdkClientCheckRequestInterface) GetStoreIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreIdOverride'
type MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call struct {
	*mock.Call
}

// GetStoreIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientCheckRequestInterface_Expecter) GetStoreIdOverride() *MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call {
	return &MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call{Call: _e.mock.On("GetStoreIdOverride")}
}

func (_c *MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call) Run(run func()) *MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call) Return(s *string) *MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientCheckRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function for the type MockSdkClientCheckRequestInterface
func (_mock *MockSdkClientCheckRequestInterface) Options(options client.ClientCheckOptions) client.SdkClientCheckRequestInterface {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientCheckRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientCheckOptions) client.SdkClientCheckRequestInterface); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientCheckRequestInterface)
		}
	}
	return r0
}

// MockSdkClientCheckRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientCheckRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.ClientCheckOptions
func (_e *MockSdkClientCheckRequestInterface_Expecter) Options(options interface{}) *MockSdkClientCheckRequestInterface_Options_Call {
	return &MockSdkClientCheckRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientCheckRequestInterface_Options_Call) Run(run func(options client.ClientCheckOptions)) *MockSdkClientCheckRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientCheckOptions
		if args[0] != nil {
			arg0 = args[0].(client.ClientCheckOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_Options_Call) Return(sdkClientCheckRequestInterface client.SdkClientCheckRequestInterface) *MockSdkClientCheckRequestInterface_Options_Call {
	_c.Call.Return(sdkClientCheckRequestInterface)
	return _c
}

func (_c *MockSdkClientCheckRequestInterface_Options_Call) RunAndReturn(run func(options client.ClientCheckOptions) client.SdkClientCheckRequestInterface) *MockSdkClientCheckRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientBatchCheckRequestInterface creates a new instance of MockSdkClientBatchCheckRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientBatchCheckRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientBatchCheckRequestInterface {
	mock := &MockSdkClientBatchCheckRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSdkClientBatchCheckRequestInterface is an autogenerated mock type for the SdkClientBatchCheckRequestInterface type
type MockSdkClientBatchCheckRequestInterface struct {
	mock.Mock
}

type MockSdkClientBatchCheckRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientBatchCheckRequestInterface) EXPECT() *MockSdkClientBatchCheckRequestInterface_Expecter {
	return &MockSdkClientBatchCheckRequestInterface_Expecter{mock: &_m.Mock}
}

// Body provides a mock function for the type MockSdkClientBatchCheckRequestInterface
func (_mock *MockSdkClientBatchCheckRequestInterface) Body(body client.ClientBatchCheckRequest) client.SdkClientBatchCheckRequestInterface {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 client.SdkClientBatchCheckRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientBatchCheckRequest) client.SdkClientBatchCheckRequestInterface); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientBatchCheckRequestInterface)
		}
	}
	return r0
}

// MockSdkClientBatchCheckRequestInterface_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type MockSdkClientBatchCheckRequestInterface_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - body client.ClientBatchCheckRequest
func (_e *MockSdkClientBatchCheckRequestInterface_Expecter) Body(body interface{}) *MockSdkClientBatchCheckRequestInterface_Body_Call {
	return &MockSdkClientBatchCheckRequestInterface_Body_Call{Call: _e.mock.On("Body", body)}
}

func (_c *MockSdkClientBatchCheckRequestInterface_Body_Call) Run(run func(body client.ClientBatchCheckRequest)) *MockSdkClientBatchCheckRequestInterface_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientBatchCheckRequest
		if args[0] != nil {
			arg0 = args[0].(client.ClientBatchCheckRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_Body_Call) Return(sdkClientBatchCheckRequestInterface client.SdkClientBatchCheckRequestInterface) *MockSdkClientBatchCheckRequestInterface_Body_Call {
	_c.Call.Return(sdkClientBatchCheckRequestInterface)
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_Body_Call) RunAndReturn(run func(body client.ClientBatchCheckRequest) client.SdkClientBatchCheckRequestInterface) *MockSdkClientBatchCheckRequestInterface_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockSdkClientBatchCheckRequestInterface
func (_mock *MockSdkClientBatchCheckRequestInterface) Execute() (*openfga.BatchCheckResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *openfga.BatchCheckResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*openfga.BatchCheckResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *openfga.BatchCheckResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.BatchCheckResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClientBatchCheckRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientBatchCheckRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientBatchCheckRequestInterface_Expecter) Execute() *MockSdkClientBatchCheckRequestInterface_Execute_Call {
	return &MockSdkClientBatchCheckRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientBatchCheckRequestInterface_Execute_Call) Run(run func()) *MockSdkClientBatchCheckRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_Execute_Call) Return(batchCheckResponse *openfga.BatchCheckResponse, err error) *MockSdkClientBatchCheckRequestInterface_Execute_Call {
	_c.Call.Return(batchCheckResponse, err)
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_Execute_Call) RunAndReturn(run func() (*openfga.BatchCheckResponse, error)) *MockSdkClientBatchCheckRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetBody provides a mock function for the type MockSdkClientBatchCheckRequestInterface
func (_mock *MockSdkClientBatchCheckRequestInterface) GetBody() *client.ClientBatchCheckRequest {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 *client.ClientBatchCheckRequest
	if returnFunc, ok := ret.Get(0).(func() *client.ClientBatchCheckRequest); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientBatchCheckRequest)
		}
	}
	return r0
}

// MockSdkClientBatchCheckRequestInterface_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type MockSdkClientBatchCheckRequestInterface_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *MockSdkClientBatchCheckRequestInterface_Expecter) GetBody() *MockSdkClientBatchCheckRequestInterface_GetBody_Call {
	return &MockSdkClientBatchCheckRequestInterface_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *MockSdkClientBatchCheckRequestInterface_GetBody_Call) Run(run func()) *MockSdkClientBatchCheckRequestInterface_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_GetBody_Call) Return(clientBatchCheckRequest *client.ClientBatchCheckRequest) *MockSdkClientBatchCheckRequestInterface_GetBody_Call {
	_c.Call.Return(clientBatchCheckRequest)
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_GetBody_Call) RunAndReturn(run func() *client.ClientBatchCheckRequest) *MockSdkClientBatchCheckRequestInterface_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockSdkClientBatchCheckRequestInterface
func (_mock *MockSdkClientBatchCheckRequestInterface) GetContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockSdkClientBatchCheckRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientBatchCheckRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientBatchCheckRequestInterface_Expecter) GetContext() *MockSdkClientBatchCheckRequestInterface_GetContext_Call {
	return &MockSdkClientBatchCheckRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientBatchCheckRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientBatchCheckRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_GetContext_Call) Return(context1 context.Context) *MockSdkClientBatchCheckRequestInterface_GetContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientBatchCheckRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function for the type MockSdkClientBatchCheckRequestInterface
func (_mock *MockSdkClientBatchCheckRequestInterface) GetOptions() *client.BatchCheckOptions {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.BatchCheckOptions
	if returnFunc, ok := ret.Get(0).(func() *client.BatchCheckOptions); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.BatchCheckOptions)
		}
	}
	return r0
}

// MockSdkClientBatchCheckRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientBatchCheckRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientBatchCheckRequestInterface_Expecter) GetOptions() *MockSdkClientBatchCheckRequestInterface_GetOptions_Call {
	return &MockSdkClientBatchCheckRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientBatchCheckRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientBatchCheckRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_GetOptions_Call) Return(batchCheckOptions *client.BatchCheckOptions) *MockSdkClientBatchCheckRequestInterface_GetOptions_Call {
	_c.Call.Return(batchCheckOptions)
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.BatchCheckOptions) *MockSdkClientBatchCheckRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function for the type MockSdkClientBatchCheckRequestInterface
func (_mock *MockSdkClientBatchCheckRequestInterface) Options(options client.BatchCheckOptions) client.SdkClientBatchCheckRequestInterface {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientBatchCheckRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.BatchCheckOptions) client.SdkClientBatchCheckRequestInterface); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientBatchCheckRequestInterface)
		}
	}
	return r0
}

// MockSdkClientBatchCheckRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientBatchCheckRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.BatchCheckOptions
func (_e *MockSdkClientBatchCheckRequestInterface_Expecter) Options(options interface{}) *MockSdkClientBatchCheckRequestInterface_Options_Call {
	return &MockSdkClientBatchCheckRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientBatchCheckRequestInterface_Options_Call) Run(run func(options client.BatchCheckOptions)) *MockSdkClientBatchCheckRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.BatchCheckOptions
		if args[0] != nil {
			arg0 = args[0].(client.BatchCheckOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_Options_Call) Return(sdkClientBatchCheckRequestInterface client.SdkClientBatchCheckRequestInterface) *MockSdkClientBatchCheckRequestInterface_Options_Call {
	_c.Call.Return(sdkClientBatchCheckRequestInterface)
	return _c
}

func (_c *MockSdkClientBatchCheckRequestInterface_Options_Call) RunAndReturn(run func(options client.BatchCheckOptions) client.SdkClientBatchCheckRequestInterface) *MockSdkClientBatchCheckRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientListObjectsRequestInterface creates a new instance of MockSdkClientListObjectsRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientListObjectsRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientListObjectsRequestInterface {
	mock := &MockSdkClientListObjectsRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSdkClientListObjectsRequestInterface is an autogenerated mock type for the SdkClientListObjectsRequestInterface type
type MockSdkClientListObjectsRequestInterface struct {
	mock.Mock
}

type MockSdkClientListObjectsRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientListObjectsRequestInterface) EXPECT() *MockSdkClientListObjectsRequestInterface_Expecter {
	return &MockSdkClientListObjectsRequestInterface_Expecter{mock: &_m.Mock}
}

// Body provides a mock function for the type MockSdkClientListObjectsRequestInterface
func (_mock *MockSdkClientListObjectsRequestInterface) Body(body client.ClientListObjectsRequest) client.SdkClientListObjectsRequestInterface {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 client.SdkClientListObjectsRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientListObjectsRequest) client.SdkClientListObjectsRequestInterface); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListObjectsRequestInterface)
		}
	}
	return r0
}

// MockSdkClientListObjectsRequestInterface_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type MockSdkClientListObjectsRequestInterface_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - body client.ClientListObjectsRequest
func (_e *MockSdkClientListObjectsRequestInterface_Expecter) Body(body interface{}) *MockSdkClientListObjectsRequestInterface_Body_Call {
	return &MockSdkClientListObjectsRequestInterface_Body_Call{Call: _e.mock.On("Body", body)}
}

func (_c *MockSdkClientListObjectsRequestInterface_Body_Call) Run(run func(body client.ClientListObjectsRequest)) *MockSdkClientListObjectsRequestInterface_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientListObjectsRequest
		if args[0] != nil {
			arg0 = args[0].(client.ClientListObjectsRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_Body_Call) Return(sdkClientListObjectsRequestInterface client.SdkClientListObjectsRequestInterface) *MockSdkClientListObjectsRequestInterface_Body_Call {
	_c.Call.Return(sdkClientListObjectsRequestInterface)
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_Body_Call) RunAndReturn(run func(body client.ClientListObjectsRequest) client.SdkClientListObjectsRequestInterface) *MockSdkClientListObjectsRequestInterface_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockSdkClientListObjectsRequestInterface
func (_mock *MockSdkClientListObjectsRequestInterface) Execute() (*client.ClientListObjectsResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *client.ClientListObjectsResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*client.ClientListObjectsResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *client.ClientListObjectsResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListObjectsResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClientListObjectsRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientListObjectsRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientListObjectsRequestInterface_Expecter) Execute() *MockSdkClientListObjectsRequestInterface_Execute_Call {
	return &MockSdkClientListObjectsRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientListObjectsRequestInterface_Execute_Call) Run(run func()) *MockSdkClientListObjectsRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_Execute_Call) Return(v *client.ClientListObjectsResponse, err error) *MockSdkClientListObjectsRequestInterface_Execute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_Execute_Call) RunAndReturn(run func() (*client.ClientListObjectsResponse, error)) *MockSdkClientListObjectsRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizationModelIdOverride provides a mock function for the type MockSdkClientListObjectsRequestInterface
func (_mock *MockSdkClientListObjectsRequestInterface) GetAuthorizationModelIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationModelIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationModelIdOverride'
type MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call struct {
	*mock.Call
}

// GetAuthorizationModelIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientListObjectsRequestInterface_Expecter) GetAuthorizationModelIdOverride() *MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call {
	return &MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call{Call: _e.mock.On("GetAuthorizationModelIdOverride")}
}

func (_c *MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call) Run(run func()) *MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call) Return(s *string) *MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientListObjectsRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GetBody provides a mock function for the type MockSdkClientListObjectsRequestInterface
func (_mock *MockSdkClientListObjectsRequestInterface) GetBody() *client.ClientListObjectsRequest {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 *client.ClientListObjectsRequest
	if returnFunc, ok := ret.Get(0).(func() *client.ClientListObjectsRequest); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListObjectsRequest)
		}
	}
	return r0
}

// MockSdkClientListObjectsRequestInterface_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type MockSdkClientListObjectsRequestInterface_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *MockSdkClientListObjectsRequestInterface_Expecter) GetBody() *MockSdkClientListObjectsRequestInterface_GetBody_Call {
	return &MockSdkClientListObjectsRequestInterface_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *MockSdkClientListObjectsRequestInterface_GetBody_Call) Run(run func()) *MockSdkClientListObjectsRequestInterface_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetBody_Call) Return(clientListObjectsRequest *client.ClientListObjectsRequest) *MockSdkClientListObjectsRequestInterface_GetBody_Call {
	_c.Call.Return(clientListObjectsRequest)
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetBody_Call) RunAndReturn(run func() *client.ClientListObjectsRequest) *MockSdkClientListObjectsRequestInterface_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockSdkClientListObjectsRequestInterface
func (_mock *MockSdkClientListObjectsRequestInterface) GetContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockSdkClientListObjectsRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientListObjectsRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientListObjectsRequestInterface_Expecter) GetContext() *MockSdkClientListObjectsRequestInterface_GetContext_Call {
	return &MockSdkClientListObjectsRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientListObjectsRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientListObjectsRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetContext_Call) Return(context1 context.Context) *MockSdkClientListObjectsRequestInterface_GetContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientListObjectsRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function for the type MockSdkClientListObjectsRequestInterface
func (_mock *MockSdkClientListObjectsRequestInterface) GetOptions() *client.ClientListObjectsOptions {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.ClientListObjectsOptions
	if returnFunc, ok := ret.Get(0).(func() *client.ClientListObjectsOptions); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListObjectsOptions)
		}
	}
	return r0
}

// MockSdkClientListObjectsRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientListObjectsRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientListObjectsRequestInterface_Expecter) GetOptions() *MockSdkClientListObjectsRequestInterface_GetOptions_Call {
	return &MockSdkClientListObjectsRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientListObjectsRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientListObjectsRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetOptions_Call) Return(clientListObjectsOptions *client.ClientListObjectsOptions) *MockSdkClientListObjectsRequestInterface_GetOptions_Call {
	_c.Call.Return(clientListObjectsOptions)
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.ClientListObjectsOptions) *MockSdkClientListObjectsRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreIdOverride provides a mock function for the type MockSdkClientListObjectsRequestInterface
func (_mock *MockSdkClientListObjectsRequestInterface) GetStoreIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreIdOverride'
type MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call struct {
	*mock.Call
}

// GetStoreIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientListObjectsRequestInterface_Expecter) GetStoreIdOverride() *MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call {
	return &MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call{Call: _e.mock.On("GetStoreIdOverride")}
}

func (_c *MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call) Run(run func()) *MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call) Return(s *string) *MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientListObjectsRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function for the type MockSdkClientListObjectsRequestInterface
func (_mock *MockSdkClientListObjectsRequestInterface) Options(options client.ClientListObjectsOptions) client.SdkClientListObjectsRequestInterface {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientListObjectsRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientListObjectsOptions) client.SdkClientListObjectsRequestInterface); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListObjectsRequestInterface)
		}
	}
	return r0
}

// MockSdkClientListObjectsRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientListObjectsRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.ClientListObjectsOptions
func (_e *MockSdkClientListObjectsRequestInterface_Expecter) Options(options interface{}) *MockSdkClientListObjectsRequestInterface_Options_Call {
	return &MockSdkClientListObjectsRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientListObjectsRequestInterface_Options_Call) Run(run func(options client.ClientListObjectsOptions)) *MockSdkClientListObjectsRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientListObjectsOptions
		if args[0] != nil {
			arg0 = args[0].(client.ClientListObjectsOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_Options_Call) Return(sdkClientListObjectsRequestInterface client.SdkClientListObjectsRequestInterface) *MockSdkClientListObjectsRequestInterface_Options_Call {
	_c.Call.Return(sdkClientListObjectsRequestInterface)
	return _c
}

func (_c *MockSdkClientListObjectsRequestInterface_Options_Call) RunAndReturn(run func(options client.ClientListObjectsOptions) client.SdkClientListObjectsRequestInterface) *MockSdkClientListObjectsRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientListUsersRequestInterface creates a new instance of MockSdkClientListUsersRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientListUsersRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientListUsersRequestInterface {
	mock := &MockSdkClientListUsersRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSdkClientListUsersRequestInterface is an autogenerated mock type for the SdkClientListUsersRequestInterface type
type MockSdkClientListUsersRequestInterface struct {
	mock.Mock
}

type MockSdkClientListUsersRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientListUsersRequestInterface) EXPECT() *MockSdkClientListUsersRequestInterface_Expecter {
	return &MockSdkClientListUsersRequestInterface_Expecter{mock: &_m.Mock}
}

// Body provides a mock function for the type MockSdkClientListUsersRequestInterface
func (_mock *MockSdkClientListUsersRequestInterface) Body(body client.ClientListUsersRequest) client.SdkClientListUsersRequestInterface {
	ret := _mock.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for Body")
	}

	var r0 client.SdkClientListUsersRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientListUsersRequest) client.SdkClientListUsersRequestInterface); ok {
		r0 = returnFunc(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListUsersRequestInterface)
		}
	}
	return r0
}

// MockSdkClientListUsersRequestInterface_Body_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Body'
type MockSdkClientListUsersRequestInterface_Body_Call struct {
	*mock.Call
}

// Body is a helper method to define mock.On call
//   - body client.ClientListUsersRequest
func (_e *MockSdkClientListUsersRequestInterface_Expecter) Body(body interface{}) *MockSdkClientListUsersRequestInterface_Body_Call {
	return &MockSdkClientListUsersRequestInterface_Body_Call{Call: _e.mock.On("Body", body)}
}

func (_c *MockSdkClientListUsersRequestInterface_Body_Call) Run(run func(body client.ClientListUsersRequest)) *MockSdkClientListUsersRequestInterface_Body_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientListUsersRequest
		if args[0] != nil {
			arg0 = args[0].(client.ClientListUsersRequest)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_Body_Call) Return(sdkClientListUsersRequestInterface client.SdkClientListUsersRequestInterface) *MockSdkClientListUsersRequestInterface_Body_Call {
	_c.Call.Return(sdkClientListUsersRequestInterface)
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_Body_Call) RunAndReturn(run func(body client.ClientListUsersRequest) client.SdkClientListUsersRequestInterface) *MockSdkClientListUsersRequestInterface_Body_Call {
	_c.Call.Return(run)
	return _c
}

// Execute provides a mock function for the type MockSdkClientListUsersRequestInterface
func (_mock *MockSdkClientListUsersRequestInterface) Execute() (*client.ClientListUsersResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *client.ClientListUsersResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*client.ClientListUsersResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *client.ClientListUsersResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListUsersResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSdkClientListUsersRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientListUsersRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientListUsersRequestInterface_Expecter) Execute() *MockSdkClientListUsersRequestInterface_Execute_Call {
	return &MockSdkClientListUsersRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientListUsersRequestInterface_Execute_Call) Run(run func()) *MockSdkClientListUsersRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_Execute_Call) Return(v *client.ClientListUsersResponse, err error) *MockSdkClientListUsersRequestInterface_Execute_Call {
	_c.Call.Return(v, err)
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_Execute_Call) RunAndReturn(run func() (*client.ClientListUsersResponse, error)) *MockSdkClientListUsersRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthorizationModelIdOverride provides a mock function for the type MockSdkClientListUsersRequestInterface
func (_mock *MockSdkClientListUsersRequestInterface) GetAuthorizationModelIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizationModelIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthorizationModelIdOverride'
type MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call struct {
	*mock.Call
}

// GetAuthorizationModelIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientListUsersRequestInterface_Expecter) GetAuthorizationModelIdOverride() *MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call {
	return &MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call{Call: _e.mock.On("GetAuthorizationModelIdOverride")}
}

func (_c *MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call) Run(run func()) *MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call) Return(s *string) *MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientListUsersRequestInterface_GetAuthorizationModelIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// GetBody provides a mock function for the type MockSdkClientListUsersRequestInterface
func (_mock *MockSdkClientListUsersRequestInterface) GetBody() *client.ClientListUsersRequest {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBody")
	}

	var r0 *client.ClientListUsersRequest
	if returnFunc, ok := ret.Get(0).(func() *client.ClientListUsersRequest); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListUsersRequest)
		}
	}
	return r0
}

// MockSdkClientListUsersRequestInterface_GetBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBody'
type MockSdkClientListUsersRequestInterface_GetBody_Call struct {
	*mock.Call
}

// GetBody is a helper method to define mock.On call
func (_e *MockSdkClientListUsersRequestInterface_Expecter) GetBody() *MockSdkClientListUsersRequestInterface_GetBody_Call {
	return &MockSdkClientListUsersRequestInterface_GetBody_Call{Call: _e.mock.On("GetBody")}
}

func (_c *MockSdkClientListUsersRequestInterface_GetBody_Call) Run(run func()) *MockSdkClientListUsersRequestInterface_GetBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetBody_Call) Return(clientListUsersRequest *client.ClientListUsersRequest) *MockSdkClientListUsersRequestInterface_GetBody_Call {
	_c.Call.Return(clientListUsersRequest)
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetBody_Call) RunAndReturn(run func() *client.ClientListUsersRequest) *MockSdkClientListUsersRequestInterface_GetBody_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function for the type MockSdkClientListUsersRequestInterface
func (_mock *MockSdkClientListUsersRequestInterface) GetContext() context.Context {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if returnFunc, ok := ret.Get(0).(func() context.Context); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
	return r0
}

// MockSdkClientListUsersRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientListUsersRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientListUsersRequestInterface_Expecter) GetContext() *MockSdkClientListUsersRequestInterface_GetContext_Call {
	return &MockSdkClientListUsersRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientListUsersRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientListUsersRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetContext_Call) Return(context1 context.Context) *MockSdkClientListUsersRequestInterface_GetContext_Call {
	_c.Call.Return(context1)
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientListUsersRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function for the type MockSdkClientListUsersRequestInterface
func (_mock *MockSdkClientListUsersRequestInterface) GetOptions() *client.ClientListUsersOptions {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.ClientListUsersOptions
	if returnFunc, ok := ret.Get(0).(func() *client.ClientListUsersOptions); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListUsersOptions)
		}
	}
	return r0
}

// MockSdkClientListUsersRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientListUsersRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientListUsersRequestInterface_Expecter) GetOptions() *MockSdkClientListUsersRequestInterface_GetOptions_Call {
	return &MockSdkClientListUsersRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientListUsersRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientListUsersRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetOptions_Call) Return(clientListUsersOptions *client.ClientListUsersOptions) *MockSdkClientListUsersRequestInterface_GetOptions_Call {
	_c.Call.Return(clientListUsersOptions)
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.ClientListUsersOptions) *MockSdkClientListUsersRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreIdOverride provides a mock function for the type MockSdkClientListUsersRequestInterface
func (_mock *MockSdkClientListUsersRequestInterface) GetStoreIdOverride() *string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreIdOverride")
	}

	var r0 *string
	if returnFunc, ok := ret.Get(0).(func() *string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}
	return r0
}

// MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreIdOverride'
type MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call struct {
	*mock.Call
}

// GetStoreIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientListUsersRequestInterface_Expecter) GetStoreIdOverride() *MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call {
	return &MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call{Call: _e.mock.On("GetStoreIdOverride")}
}

func (_c *MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call) Run(run func()) *MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call) Return(s *string) *MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientListUsersRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function for the type MockSdkClientListUsersRequestInterface
func (_mock *MockSdkClientListUsersRequestInterface) Options(options client.ClientListUsersOptions) client.SdkClientListUsersRequestInterface {
	ret := _mock.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientListUsersRequestInterface
	if returnFunc, ok := ret.Get(0).(func(client.ClientListUsersOptions) client.SdkClientListUsersRequestInterface); ok {
		r0 = returnFunc(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListUsersRequestInterface)
		}
	}
	return r0
}

// MockSdkClientListUsersRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientListUsersRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.ClientListUsersOptions
func (_e *MockSdkClientListUsersRequestInterface_Expecter) Options(options interface{}) *MockSdkClientListUsersRequestInterface_Options_Call {
	return &MockSdkClientListUsersRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientListUsersRequestInterface_Options_Call) Run(run func(options client.ClientListUsersOptions)) *MockSdkClientListUsersRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 client.ClientListUsersOptions
		if args[0] != nil {
			arg0 = args[0].(client.ClientListUsersOptions)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_Options_Call) Return(sdkClientListUsersRequestInterface client.SdkClientListUsersRequestInterface) *MockSdkClientListUsersRequestInterface_Options_Call {
	_c.Call.Return(sdkClientListUsersRequestInterface)
	return _c
}

func (_c *MockSdkClientListUsersRequestInterface_Options_Call) RunAndReturn(run func(options client.ClientListUsersOptions) client.SdkClientListUsersRequestInterface) *MockSdkClientListUsersRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}
