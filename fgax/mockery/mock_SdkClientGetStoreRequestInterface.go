// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"

	client "github.com/openfga/go-sdk/client"

	mock "github.com/stretchr/testify/mock"

	openfga "github.com/openfga/go-sdk"
)

// MockSdkClientGetStoreRequestInterface is an autogenerated mock type for the SdkClientGetStoreRequestInterface type
type MockSdkClientGetStoreRequestInterface struct {
	mock.Mock
}

type MockSdkClientGetStoreRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientGetStoreRequestInterface) EXPECT() *MockSdkClientGetStoreRequestInterface_Expecter {
	return &MockSdkClientGetStoreRequestInterface_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *MockSdkClientGetStoreRequestInterface) Execute() (*openfga.GetStoreResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *openfga.GetStoreResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*openfga.GetStoreResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *openfga.GetStoreResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.GetStoreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClientGetStoreRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientGetStoreRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientGetStoreRequestInterface_Expecter) Execute() *MockSdkClientGetStoreRequestInterface_Execute_Call {
	return &MockSdkClientGetStoreRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientGetStoreRequestInterface_Execute_Call) Run(run func()) *MockSdkClientGetStoreRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_Execute_Call) Return(_a0 *openfga.GetStoreResponse, _a1 error) *MockSdkClientGetStoreRequestInterface_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_Execute_Call) RunAndReturn(run func() (*openfga.GetStoreResponse, error)) *MockSdkClientGetStoreRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function with given fields:
func (_m *MockSdkClientGetStoreRequestInterface) GetContext() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockSdkClientGetStoreRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientGetStoreRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientGetStoreRequestInterface_Expecter) GetContext() *MockSdkClientGetStoreRequestInterface_GetContext_Call {
	return &MockSdkClientGetStoreRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientGetStoreRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientGetStoreRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_GetContext_Call) Return(_a0 context.Context) *MockSdkClientGetStoreRequestInterface_GetContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientGetStoreRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function with given fields:
func (_m *MockSdkClientGetStoreRequestInterface) GetOptions() *client.ClientGetStoreOptions {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.ClientGetStoreOptions
	if rf, ok := ret.Get(0).(func() *client.ClientGetStoreOptions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientGetStoreOptions)
		}
	}

	return r0
}

// MockSdkClientGetStoreRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientGetStoreRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientGetStoreRequestInterface_Expecter) GetOptions() *MockSdkClientGetStoreRequestInterface_GetOptions_Call {
	return &MockSdkClientGetStoreRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientGetStoreRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientGetStoreRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_GetOptions_Call) Return(_a0 *client.ClientGetStoreOptions) *MockSdkClientGetStoreRequestInterface_GetOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.ClientGetStoreOptions) *MockSdkClientGetStoreRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreIdOverride provides a mock function with given fields:
func (_m *MockSdkClientGetStoreRequestInterface) GetStoreIdOverride() *string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStoreIdOverride")
	}

	var r0 *string
	if rf, ok := ret.Get(0).(func() *string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	return r0
}

// MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreIdOverride'
type MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call struct {
	*mock.Call
}

// GetStoreIdOverride is a helper method to define mock.On call
func (_e *MockSdkClientGetStoreRequestInterface_Expecter) GetStoreIdOverride() *MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call {
	return &MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call{Call: _e.mock.On("GetStoreIdOverride")}
}

func (_c *MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call) Run(run func()) *MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call) Return(_a0 *string) *MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call) RunAndReturn(run func() *string) *MockSdkClientGetStoreRequestInterface_GetStoreIdOverride_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function with given fields: options
func (_m *MockSdkClientGetStoreRequestInterface) Options(options client.ClientGetStoreOptions) client.SdkClientGetStoreRequestInterface {
	ret := _m.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientGetStoreRequestInterface
	if rf, ok := ret.Get(0).(func(client.ClientGetStoreOptions) client.SdkClientGetStoreRequestInterface); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientGetStoreRequestInterface)
		}
	}

	return r0
}

// MockSdkClientGetStoreRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientGetStoreRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.ClientGetStoreOptions
func (_e *MockSdkClientGetStoreRequestInterface_Expecter) Options(options interface{}) *MockSdkClientGetStoreRequestInterface_Options_Call {
	return &MockSdkClientGetStoreRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientGetStoreRequestInterface_Options_Call) Run(run func(options client.ClientGetStoreOptions)) *MockSdkClientGetStoreRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.ClientGetStoreOptions))
	})
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_Options_Call) Return(_a0 client.SdkClientGetStoreRequestInterface) *MockSdkClientGetStoreRequestInterface_Options_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClientGetStoreRequestInterface_Options_Call) RunAndReturn(run func(client.ClientGetStoreOptions) client.SdkClientGetStoreRequestInterface) *MockSdkClientGetStoreRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientGetStoreRequestInterface creates a new instance of MockSdkClientGetStoreRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientGetStoreRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientGetStoreRequestInterface {
	mock := &MockSdkClientGetStoreRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
