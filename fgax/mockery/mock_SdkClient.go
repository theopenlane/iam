// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"

	client "github.com/openfga/go-sdk/client"

	mock "github.com/stretchr/testify/mock"

	openfga "github.com/openfga/go-sdk"
)

// MockSdkClient is an autogenerated mock type for the SdkClient type
type MockSdkClient struct {
	mock.Mock
}

type MockSdkClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClient) EXPECT() *MockSdkClient_Expecter {
	return &MockSdkClient_Expecter{mock: &_m.Mock}
}

// BatchCheck provides a mock function with given fields: ctx
func (_m *MockSdkClient) BatchCheck(ctx context.Context) client.SdkClientBatchCheckRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BatchCheck")
	}

	var r0 client.SdkClientBatchCheckRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientBatchCheckRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientBatchCheckRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_BatchCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCheck'
type MockSdkClient_BatchCheck_Call struct {
	*mock.Call
}

// BatchCheck is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) BatchCheck(ctx interface{}) *MockSdkClient_BatchCheck_Call {
	return &MockSdkClient_BatchCheck_Call{Call: _e.mock.On("BatchCheck", ctx)}
}

func (_c *MockSdkClient_BatchCheck_Call) Run(run func(ctx context.Context)) *MockSdkClient_BatchCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_BatchCheck_Call) Return(_a0 client.SdkClientBatchCheckRequestInterface) *MockSdkClient_BatchCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_BatchCheck_Call) RunAndReturn(run func(context.Context) client.SdkClientBatchCheckRequestInterface) *MockSdkClient_BatchCheck_Call {
	_c.Call.Return(run)
	return _c
}

// BatchCheckExecute provides a mock function with given fields: request
func (_m *MockSdkClient) BatchCheckExecute(request client.SdkClientBatchCheckRequestInterface) (*[]client.ClientBatchCheckSingleResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for BatchCheckExecute")
	}

	var r0 *[]client.ClientBatchCheckSingleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientBatchCheckRequestInterface) (*[]client.ClientBatchCheckSingleResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientBatchCheckRequestInterface) *[]client.ClientBatchCheckSingleResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]client.ClientBatchCheckSingleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientBatchCheckRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_BatchCheckExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchCheckExecute'
type MockSdkClient_BatchCheckExecute_Call struct {
	*mock.Call
}

// BatchCheckExecute is a helper method to define mock.On call
//   - request client.SdkClientBatchCheckRequestInterface
func (_e *MockSdkClient_Expecter) BatchCheckExecute(request interface{}) *MockSdkClient_BatchCheckExecute_Call {
	return &MockSdkClient_BatchCheckExecute_Call{Call: _e.mock.On("BatchCheckExecute", request)}
}

func (_c *MockSdkClient_BatchCheckExecute_Call) Run(run func(request client.SdkClientBatchCheckRequestInterface)) *MockSdkClient_BatchCheckExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientBatchCheckRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_BatchCheckExecute_Call) Return(_a0 *[]client.ClientBatchCheckSingleResponse, _a1 error) *MockSdkClient_BatchCheckExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_BatchCheckExecute_Call) RunAndReturn(run func(client.SdkClientBatchCheckRequestInterface) (*[]client.ClientBatchCheckSingleResponse, error)) *MockSdkClient_BatchCheckExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Check provides a mock function with given fields: ctx
func (_m *MockSdkClient) Check(ctx context.Context) client.SdkClientCheckRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 client.SdkClientCheckRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientCheckRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientCheckRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type MockSdkClient_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) Check(ctx interface{}) *MockSdkClient_Check_Call {
	return &MockSdkClient_Check_Call{Call: _e.mock.On("Check", ctx)}
}

func (_c *MockSdkClient_Check_Call) Run(run func(ctx context.Context)) *MockSdkClient_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_Check_Call) Return(_a0 client.SdkClientCheckRequestInterface) *MockSdkClient_Check_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_Check_Call) RunAndReturn(run func(context.Context) client.SdkClientCheckRequestInterface) *MockSdkClient_Check_Call {
	_c.Call.Return(run)
	return _c
}

// CheckExecute provides a mock function with given fields: request
func (_m *MockSdkClient) CheckExecute(request client.SdkClientCheckRequestInterface) (*client.ClientCheckResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CheckExecute")
	}

	var r0 *client.ClientCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientCheckRequestInterface) (*client.ClientCheckResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientCheckRequestInterface) *client.ClientCheckResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientCheckRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_CheckExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckExecute'
type MockSdkClient_CheckExecute_Call struct {
	*mock.Call
}

// CheckExecute is a helper method to define mock.On call
//   - request client.SdkClientCheckRequestInterface
func (_e *MockSdkClient_Expecter) CheckExecute(request interface{}) *MockSdkClient_CheckExecute_Call {
	return &MockSdkClient_CheckExecute_Call{Call: _e.mock.On("CheckExecute", request)}
}

func (_c *MockSdkClient_CheckExecute_Call) Run(run func(request client.SdkClientCheckRequestInterface)) *MockSdkClient_CheckExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientCheckRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_CheckExecute_Call) Return(_a0 *client.ClientCheckResponse, _a1 error) *MockSdkClient_CheckExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_CheckExecute_Call) RunAndReturn(run func(client.SdkClientCheckRequestInterface) (*client.ClientCheckResponse, error)) *MockSdkClient_CheckExecute_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStore provides a mock function with given fields: ctx
func (_m *MockSdkClient) CreateStore(ctx context.Context) client.SdkClientCreateStoreRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CreateStore")
	}

	var r0 client.SdkClientCreateStoreRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientCreateStoreRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientCreateStoreRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_CreateStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStore'
type MockSdkClient_CreateStore_Call struct {
	*mock.Call
}

// CreateStore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) CreateStore(ctx interface{}) *MockSdkClient_CreateStore_Call {
	return &MockSdkClient_CreateStore_Call{Call: _e.mock.On("CreateStore", ctx)}
}

func (_c *MockSdkClient_CreateStore_Call) Run(run func(ctx context.Context)) *MockSdkClient_CreateStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_CreateStore_Call) Return(_a0 client.SdkClientCreateStoreRequestInterface) *MockSdkClient_CreateStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_CreateStore_Call) RunAndReturn(run func(context.Context) client.SdkClientCreateStoreRequestInterface) *MockSdkClient_CreateStore_Call {
	_c.Call.Return(run)
	return _c
}

// CreateStoreExecute provides a mock function with given fields: request
func (_m *MockSdkClient) CreateStoreExecute(request client.SdkClientCreateStoreRequestInterface) (*openfga.CreateStoreResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for CreateStoreExecute")
	}

	var r0 *openfga.CreateStoreResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientCreateStoreRequestInterface) (*openfga.CreateStoreResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientCreateStoreRequestInterface) *openfga.CreateStoreResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.CreateStoreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientCreateStoreRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_CreateStoreExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStoreExecute'
type MockSdkClient_CreateStoreExecute_Call struct {
	*mock.Call
}

// CreateStoreExecute is a helper method to define mock.On call
//   - request client.SdkClientCreateStoreRequestInterface
func (_e *MockSdkClient_Expecter) CreateStoreExecute(request interface{}) *MockSdkClient_CreateStoreExecute_Call {
	return &MockSdkClient_CreateStoreExecute_Call{Call: _e.mock.On("CreateStoreExecute", request)}
}

func (_c *MockSdkClient_CreateStoreExecute_Call) Run(run func(request client.SdkClientCreateStoreRequestInterface)) *MockSdkClient_CreateStoreExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientCreateStoreRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_CreateStoreExecute_Call) Return(_a0 *openfga.CreateStoreResponse, _a1 error) *MockSdkClient_CreateStoreExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_CreateStoreExecute_Call) RunAndReturn(run func(client.SdkClientCreateStoreRequestInterface) (*openfga.CreateStoreResponse, error)) *MockSdkClient_CreateStoreExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStore provides a mock function with given fields: ctx
func (_m *MockSdkClient) DeleteStore(ctx context.Context) client.SdkClientDeleteStoreRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStore")
	}

	var r0 client.SdkClientDeleteStoreRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientDeleteStoreRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientDeleteStoreRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_DeleteStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStore'
type MockSdkClient_DeleteStore_Call struct {
	*mock.Call
}

// DeleteStore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) DeleteStore(ctx interface{}) *MockSdkClient_DeleteStore_Call {
	return &MockSdkClient_DeleteStore_Call{Call: _e.mock.On("DeleteStore", ctx)}
}

func (_c *MockSdkClient_DeleteStore_Call) Run(run func(ctx context.Context)) *MockSdkClient_DeleteStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_DeleteStore_Call) Return(_a0 client.SdkClientDeleteStoreRequestInterface) *MockSdkClient_DeleteStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_DeleteStore_Call) RunAndReturn(run func(context.Context) client.SdkClientDeleteStoreRequestInterface) *MockSdkClient_DeleteStore_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteStoreExecute provides a mock function with given fields: request
func (_m *MockSdkClient) DeleteStoreExecute(request client.SdkClientDeleteStoreRequestInterface) (*client.ClientDeleteStoreResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStoreExecute")
	}

	var r0 *client.ClientDeleteStoreResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientDeleteStoreRequestInterface) (*client.ClientDeleteStoreResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientDeleteStoreRequestInterface) *client.ClientDeleteStoreResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientDeleteStoreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientDeleteStoreRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_DeleteStoreExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStoreExecute'
type MockSdkClient_DeleteStoreExecute_Call struct {
	*mock.Call
}

// DeleteStoreExecute is a helper method to define mock.On call
//   - request client.SdkClientDeleteStoreRequestInterface
func (_e *MockSdkClient_Expecter) DeleteStoreExecute(request interface{}) *MockSdkClient_DeleteStoreExecute_Call {
	return &MockSdkClient_DeleteStoreExecute_Call{Call: _e.mock.On("DeleteStoreExecute", request)}
}

func (_c *MockSdkClient_DeleteStoreExecute_Call) Run(run func(request client.SdkClientDeleteStoreRequestInterface)) *MockSdkClient_DeleteStoreExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientDeleteStoreRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_DeleteStoreExecute_Call) Return(_a0 *client.ClientDeleteStoreResponse, _a1 error) *MockSdkClient_DeleteStoreExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_DeleteStoreExecute_Call) RunAndReturn(run func(client.SdkClientDeleteStoreRequestInterface) (*client.ClientDeleteStoreResponse, error)) *MockSdkClient_DeleteStoreExecute_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTuples provides a mock function with given fields: ctx
func (_m *MockSdkClient) DeleteTuples(ctx context.Context) client.SdkClientDeleteTuplesRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTuples")
	}

	var r0 client.SdkClientDeleteTuplesRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientDeleteTuplesRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientDeleteTuplesRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_DeleteTuples_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTuples'
type MockSdkClient_DeleteTuples_Call struct {
	*mock.Call
}

// DeleteTuples is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) DeleteTuples(ctx interface{}) *MockSdkClient_DeleteTuples_Call {
	return &MockSdkClient_DeleteTuples_Call{Call: _e.mock.On("DeleteTuples", ctx)}
}

func (_c *MockSdkClient_DeleteTuples_Call) Run(run func(ctx context.Context)) *MockSdkClient_DeleteTuples_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_DeleteTuples_Call) Return(_a0 client.SdkClientDeleteTuplesRequestInterface) *MockSdkClient_DeleteTuples_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_DeleteTuples_Call) RunAndReturn(run func(context.Context) client.SdkClientDeleteTuplesRequestInterface) *MockSdkClient_DeleteTuples_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTuplesExecute provides a mock function with given fields: request
func (_m *MockSdkClient) DeleteTuplesExecute(request client.SdkClientDeleteTuplesRequestInterface) (*client.ClientWriteResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTuplesExecute")
	}

	var r0 *client.ClientWriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientDeleteTuplesRequestInterface) (*client.ClientWriteResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientDeleteTuplesRequestInterface) *client.ClientWriteResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientDeleteTuplesRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_DeleteTuplesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTuplesExecute'
type MockSdkClient_DeleteTuplesExecute_Call struct {
	*mock.Call
}

// DeleteTuplesExecute is a helper method to define mock.On call
//   - request client.SdkClientDeleteTuplesRequestInterface
func (_e *MockSdkClient_Expecter) DeleteTuplesExecute(request interface{}) *MockSdkClient_DeleteTuplesExecute_Call {
	return &MockSdkClient_DeleteTuplesExecute_Call{Call: _e.mock.On("DeleteTuplesExecute", request)}
}

func (_c *MockSdkClient_DeleteTuplesExecute_Call) Run(run func(request client.SdkClientDeleteTuplesRequestInterface)) *MockSdkClient_DeleteTuplesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientDeleteTuplesRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_DeleteTuplesExecute_Call) Return(_a0 *client.ClientWriteResponse, _a1 error) *MockSdkClient_DeleteTuplesExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_DeleteTuplesExecute_Call) RunAndReturn(run func(client.SdkClientDeleteTuplesRequestInterface) (*client.ClientWriteResponse, error)) *MockSdkClient_DeleteTuplesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Expand provides a mock function with given fields: ctx
func (_m *MockSdkClient) Expand(ctx context.Context) client.SdkClientExpandRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Expand")
	}

	var r0 client.SdkClientExpandRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientExpandRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientExpandRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_Expand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expand'
type MockSdkClient_Expand_Call struct {
	*mock.Call
}

// Expand is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) Expand(ctx interface{}) *MockSdkClient_Expand_Call {
	return &MockSdkClient_Expand_Call{Call: _e.mock.On("Expand", ctx)}
}

func (_c *MockSdkClient_Expand_Call) Run(run func(ctx context.Context)) *MockSdkClient_Expand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_Expand_Call) Return(_a0 client.SdkClientExpandRequestInterface) *MockSdkClient_Expand_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_Expand_Call) RunAndReturn(run func(context.Context) client.SdkClientExpandRequestInterface) *MockSdkClient_Expand_Call {
	_c.Call.Return(run)
	return _c
}

// ExpandExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ExpandExecute(request client.SdkClientExpandRequestInterface) (*openfga.ExpandResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ExpandExecute")
	}

	var r0 *openfga.ExpandResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientExpandRequestInterface) (*openfga.ExpandResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientExpandRequestInterface) *openfga.ExpandResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ExpandResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientExpandRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ExpandExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExpandExecute'
type MockSdkClient_ExpandExecute_Call struct {
	*mock.Call
}

// ExpandExecute is a helper method to define mock.On call
//   - request client.SdkClientExpandRequestInterface
func (_e *MockSdkClient_Expecter) ExpandExecute(request interface{}) *MockSdkClient_ExpandExecute_Call {
	return &MockSdkClient_ExpandExecute_Call{Call: _e.mock.On("ExpandExecute", request)}
}

func (_c *MockSdkClient_ExpandExecute_Call) Run(run func(request client.SdkClientExpandRequestInterface)) *MockSdkClient_ExpandExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientExpandRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ExpandExecute_Call) Return(_a0 *openfga.ExpandResponse, _a1 error) *MockSdkClient_ExpandExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ExpandExecute_Call) RunAndReturn(run func(client.SdkClientExpandRequestInterface) (*openfga.ExpandResponse, error)) *MockSdkClient_ExpandExecute_Call {
	_c.Call.Return(run)
	return _c
}

// GetStore provides a mock function with given fields: ctx
func (_m *MockSdkClient) GetStore(ctx context.Context) client.SdkClientGetStoreRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetStore")
	}

	var r0 client.SdkClientGetStoreRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientGetStoreRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientGetStoreRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_GetStore_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStore'
type MockSdkClient_GetStore_Call struct {
	*mock.Call
}

// GetStore is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) GetStore(ctx interface{}) *MockSdkClient_GetStore_Call {
	return &MockSdkClient_GetStore_Call{Call: _e.mock.On("GetStore", ctx)}
}

func (_c *MockSdkClient_GetStore_Call) Run(run func(ctx context.Context)) *MockSdkClient_GetStore_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_GetStore_Call) Return(_a0 client.SdkClientGetStoreRequestInterface) *MockSdkClient_GetStore_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_GetStore_Call) RunAndReturn(run func(context.Context) client.SdkClientGetStoreRequestInterface) *MockSdkClient_GetStore_Call {
	_c.Call.Return(run)
	return _c
}

// GetStoreExecute provides a mock function with given fields: request
func (_m *MockSdkClient) GetStoreExecute(request client.SdkClientGetStoreRequestInterface) (*openfga.GetStoreResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for GetStoreExecute")
	}

	var r0 *openfga.GetStoreResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientGetStoreRequestInterface) (*openfga.GetStoreResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientGetStoreRequestInterface) *openfga.GetStoreResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.GetStoreResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientGetStoreRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_GetStoreExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStoreExecute'
type MockSdkClient_GetStoreExecute_Call struct {
	*mock.Call
}

// GetStoreExecute is a helper method to define mock.On call
//   - request client.SdkClientGetStoreRequestInterface
func (_e *MockSdkClient_Expecter) GetStoreExecute(request interface{}) *MockSdkClient_GetStoreExecute_Call {
	return &MockSdkClient_GetStoreExecute_Call{Call: _e.mock.On("GetStoreExecute", request)}
}

func (_c *MockSdkClient_GetStoreExecute_Call) Run(run func(request client.SdkClientGetStoreRequestInterface)) *MockSdkClient_GetStoreExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientGetStoreRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_GetStoreExecute_Call) Return(_a0 *openfga.GetStoreResponse, _a1 error) *MockSdkClient_GetStoreExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_GetStoreExecute_Call) RunAndReturn(run func(client.SdkClientGetStoreRequestInterface) (*openfga.GetStoreResponse, error)) *MockSdkClient_GetStoreExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjects provides a mock function with given fields: ctx
func (_m *MockSdkClient) ListObjects(ctx context.Context) client.SdkClientListObjectsRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 client.SdkClientListObjectsRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientListObjectsRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListObjectsRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type MockSdkClient_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ListObjects(ctx interface{}) *MockSdkClient_ListObjects_Call {
	return &MockSdkClient_ListObjects_Call{Call: _e.mock.On("ListObjects", ctx)}
}

func (_c *MockSdkClient_ListObjects_Call) Run(run func(ctx context.Context)) *MockSdkClient_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_ListObjects_Call) Return(_a0 client.SdkClientListObjectsRequestInterface) *MockSdkClient_ListObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_ListObjects_Call) RunAndReturn(run func(context.Context) client.SdkClientListObjectsRequestInterface) *MockSdkClient_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjectsExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ListObjectsExecute(request client.SdkClientListObjectsRequestInterface) (*openfga.ListObjectsResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectsExecute")
	}

	var r0 *openfga.ListObjectsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientListObjectsRequestInterface) (*openfga.ListObjectsResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientListObjectsRequestInterface) *openfga.ListObjectsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ListObjectsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientListObjectsRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ListObjectsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjectsExecute'
type MockSdkClient_ListObjectsExecute_Call struct {
	*mock.Call
}

// ListObjectsExecute is a helper method to define mock.On call
//   - request client.SdkClientListObjectsRequestInterface
func (_e *MockSdkClient_Expecter) ListObjectsExecute(request interface{}) *MockSdkClient_ListObjectsExecute_Call {
	return &MockSdkClient_ListObjectsExecute_Call{Call: _e.mock.On("ListObjectsExecute", request)}
}

func (_c *MockSdkClient_ListObjectsExecute_Call) Run(run func(request client.SdkClientListObjectsRequestInterface)) *MockSdkClient_ListObjectsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientListObjectsRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ListObjectsExecute_Call) Return(_a0 *openfga.ListObjectsResponse, _a1 error) *MockSdkClient_ListObjectsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ListObjectsExecute_Call) RunAndReturn(run func(client.SdkClientListObjectsRequestInterface) (*openfga.ListObjectsResponse, error)) *MockSdkClient_ListObjectsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListRelations provides a mock function with given fields: ctx
func (_m *MockSdkClient) ListRelations(ctx context.Context) client.SdkClientListRelationsRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListRelations")
	}

	var r0 client.SdkClientListRelationsRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientListRelationsRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListRelationsRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_ListRelations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRelations'
type MockSdkClient_ListRelations_Call struct {
	*mock.Call
}

// ListRelations is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ListRelations(ctx interface{}) *MockSdkClient_ListRelations_Call {
	return &MockSdkClient_ListRelations_Call{Call: _e.mock.On("ListRelations", ctx)}
}

func (_c *MockSdkClient_ListRelations_Call) Run(run func(ctx context.Context)) *MockSdkClient_ListRelations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_ListRelations_Call) Return(_a0 client.SdkClientListRelationsRequestInterface) *MockSdkClient_ListRelations_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_ListRelations_Call) RunAndReturn(run func(context.Context) client.SdkClientListRelationsRequestInterface) *MockSdkClient_ListRelations_Call {
	_c.Call.Return(run)
	return _c
}

// ListRelationsExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ListRelationsExecute(request client.SdkClientListRelationsRequestInterface) (*client.ClientListRelationsResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ListRelationsExecute")
	}

	var r0 *client.ClientListRelationsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientListRelationsRequestInterface) (*client.ClientListRelationsResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientListRelationsRequestInterface) *client.ClientListRelationsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListRelationsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientListRelationsRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ListRelationsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRelationsExecute'
type MockSdkClient_ListRelationsExecute_Call struct {
	*mock.Call
}

// ListRelationsExecute is a helper method to define mock.On call
//   - request client.SdkClientListRelationsRequestInterface
func (_e *MockSdkClient_Expecter) ListRelationsExecute(request interface{}) *MockSdkClient_ListRelationsExecute_Call {
	return &MockSdkClient_ListRelationsExecute_Call{Call: _e.mock.On("ListRelationsExecute", request)}
}

func (_c *MockSdkClient_ListRelationsExecute_Call) Run(run func(request client.SdkClientListRelationsRequestInterface)) *MockSdkClient_ListRelationsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientListRelationsRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ListRelationsExecute_Call) Return(_a0 *client.ClientListRelationsResponse, _a1 error) *MockSdkClient_ListRelationsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ListRelationsExecute_Call) RunAndReturn(run func(client.SdkClientListRelationsRequestInterface) (*client.ClientListRelationsResponse, error)) *MockSdkClient_ListRelationsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListStores provides a mock function with given fields: ctx
func (_m *MockSdkClient) ListStores(ctx context.Context) client.SdkClientListStoresRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListStores")
	}

	var r0 client.SdkClientListStoresRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientListStoresRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListStoresRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_ListStores_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStores'
type MockSdkClient_ListStores_Call struct {
	*mock.Call
}

// ListStores is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ListStores(ctx interface{}) *MockSdkClient_ListStores_Call {
	return &MockSdkClient_ListStores_Call{Call: _e.mock.On("ListStores", ctx)}
}

func (_c *MockSdkClient_ListStores_Call) Run(run func(ctx context.Context)) *MockSdkClient_ListStores_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_ListStores_Call) Return(_a0 client.SdkClientListStoresRequestInterface) *MockSdkClient_ListStores_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_ListStores_Call) RunAndReturn(run func(context.Context) client.SdkClientListStoresRequestInterface) *MockSdkClient_ListStores_Call {
	_c.Call.Return(run)
	return _c
}

// ListStoresExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ListStoresExecute(request client.SdkClientListStoresRequestInterface) (*openfga.ListStoresResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ListStoresExecute")
	}

	var r0 *openfga.ListStoresResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientListStoresRequestInterface) (*openfga.ListStoresResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientListStoresRequestInterface) *openfga.ListStoresResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ListStoresResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientListStoresRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ListStoresExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListStoresExecute'
type MockSdkClient_ListStoresExecute_Call struct {
	*mock.Call
}

// ListStoresExecute is a helper method to define mock.On call
//   - request client.SdkClientListStoresRequestInterface
func (_e *MockSdkClient_Expecter) ListStoresExecute(request interface{}) *MockSdkClient_ListStoresExecute_Call {
	return &MockSdkClient_ListStoresExecute_Call{Call: _e.mock.On("ListStoresExecute", request)}
}

func (_c *MockSdkClient_ListStoresExecute_Call) Run(run func(request client.SdkClientListStoresRequestInterface)) *MockSdkClient_ListStoresExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientListStoresRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ListStoresExecute_Call) Return(_a0 *openfga.ListStoresResponse, _a1 error) *MockSdkClient_ListStoresExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ListStoresExecute_Call) RunAndReturn(run func(client.SdkClientListStoresRequestInterface) (*openfga.ListStoresResponse, error)) *MockSdkClient_ListStoresExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsers provides a mock function with given fields: ctx
func (_m *MockSdkClient) ListUsers(ctx context.Context) client.SdkClientListUsersRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 client.SdkClientListUsersRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientListUsersRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListUsersRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_ListUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsers'
type MockSdkClient_ListUsers_Call struct {
	*mock.Call
}

// ListUsers is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ListUsers(ctx interface{}) *MockSdkClient_ListUsers_Call {
	return &MockSdkClient_ListUsers_Call{Call: _e.mock.On("ListUsers", ctx)}
}

func (_c *MockSdkClient_ListUsers_Call) Run(run func(ctx context.Context)) *MockSdkClient_ListUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_ListUsers_Call) Return(_a0 client.SdkClientListUsersRequestInterface) *MockSdkClient_ListUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_ListUsers_Call) RunAndReturn(run func(context.Context) client.SdkClientListUsersRequestInterface) *MockSdkClient_ListUsers_Call {
	_c.Call.Return(run)
	return _c
}

// ListUsersExecute provides a mock function with given fields: r
func (_m *MockSdkClient) ListUsersExecute(r client.SdkClientListUsersRequestInterface) (*openfga.ListUsersResponse, error) {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersExecute")
	}

	var r0 *openfga.ListUsersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientListUsersRequestInterface) (*openfga.ListUsersResponse, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientListUsersRequestInterface) *openfga.ListUsersResponse); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ListUsersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientListUsersRequestInterface) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ListUsersExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUsersExecute'
type MockSdkClient_ListUsersExecute_Call struct {
	*mock.Call
}

// ListUsersExecute is a helper method to define mock.On call
//   - r client.SdkClientListUsersRequestInterface
func (_e *MockSdkClient_Expecter) ListUsersExecute(r interface{}) *MockSdkClient_ListUsersExecute_Call {
	return &MockSdkClient_ListUsersExecute_Call{Call: _e.mock.On("ListUsersExecute", r)}
}

func (_c *MockSdkClient_ListUsersExecute_Call) Run(run func(r client.SdkClientListUsersRequestInterface)) *MockSdkClient_ListUsersExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientListUsersRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ListUsersExecute_Call) Return(_a0 *openfga.ListUsersResponse, _a1 error) *MockSdkClient_ListUsersExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ListUsersExecute_Call) RunAndReturn(run func(client.SdkClientListUsersRequestInterface) (*openfga.ListUsersResponse, error)) *MockSdkClient_ListUsersExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx
func (_m *MockSdkClient) Read(ctx context.Context) client.SdkClientReadRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 client.SdkClientReadRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientReadRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MockSdkClient_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) Read(ctx interface{}) *MockSdkClient_Read_Call {
	return &MockSdkClient_Read_Call{Call: _e.mock.On("Read", ctx)}
}

func (_c *MockSdkClient_Read_Call) Run(run func(ctx context.Context)) *MockSdkClient_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_Read_Call) Return(_a0 client.SdkClientReadRequestInterface) *MockSdkClient_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_Read_Call) RunAndReturn(run func(context.Context) client.SdkClientReadRequestInterface) *MockSdkClient_Read_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAssertions provides a mock function with given fields: ctx
func (_m *MockSdkClient) ReadAssertions(ctx context.Context) client.SdkClientReadAssertionsRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadAssertions")
	}

	var r0 client.SdkClientReadAssertionsRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientReadAssertionsRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadAssertionsRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_ReadAssertions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAssertions'
type MockSdkClient_ReadAssertions_Call struct {
	*mock.Call
}

// ReadAssertions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadAssertions(ctx interface{}) *MockSdkClient_ReadAssertions_Call {
	return &MockSdkClient_ReadAssertions_Call{Call: _e.mock.On("ReadAssertions", ctx)}
}

func (_c *MockSdkClient_ReadAssertions_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadAssertions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_ReadAssertions_Call) Return(_a0 client.SdkClientReadAssertionsRequestInterface) *MockSdkClient_ReadAssertions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_ReadAssertions_Call) RunAndReturn(run func(context.Context) client.SdkClientReadAssertionsRequestInterface) *MockSdkClient_ReadAssertions_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAssertionsExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ReadAssertionsExecute(request client.SdkClientReadAssertionsRequestInterface) (*openfga.ReadAssertionsResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadAssertionsExecute")
	}

	var r0 *openfga.ReadAssertionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientReadAssertionsRequestInterface) (*openfga.ReadAssertionsResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientReadAssertionsRequestInterface) *openfga.ReadAssertionsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ReadAssertionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientReadAssertionsRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ReadAssertionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAssertionsExecute'
type MockSdkClient_ReadAssertionsExecute_Call struct {
	*mock.Call
}

// ReadAssertionsExecute is a helper method to define mock.On call
//   - request client.SdkClientReadAssertionsRequestInterface
func (_e *MockSdkClient_Expecter) ReadAssertionsExecute(request interface{}) *MockSdkClient_ReadAssertionsExecute_Call {
	return &MockSdkClient_ReadAssertionsExecute_Call{Call: _e.mock.On("ReadAssertionsExecute", request)}
}

func (_c *MockSdkClient_ReadAssertionsExecute_Call) Run(run func(request client.SdkClientReadAssertionsRequestInterface)) *MockSdkClient_ReadAssertionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientReadAssertionsRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ReadAssertionsExecute_Call) Return(_a0 *openfga.ReadAssertionsResponse, _a1 error) *MockSdkClient_ReadAssertionsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ReadAssertionsExecute_Call) RunAndReturn(run func(client.SdkClientReadAssertionsRequestInterface) (*openfga.ReadAssertionsResponse, error)) *MockSdkClient_ReadAssertionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAuthorizationModel provides a mock function with given fields: ctx
func (_m *MockSdkClient) ReadAuthorizationModel(ctx context.Context) client.SdkClientReadAuthorizationModelRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadAuthorizationModel")
	}

	var r0 client.SdkClientReadAuthorizationModelRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientReadAuthorizationModelRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadAuthorizationModelRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_ReadAuthorizationModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAuthorizationModel'
type MockSdkClient_ReadAuthorizationModel_Call struct {
	*mock.Call
}

// ReadAuthorizationModel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadAuthorizationModel(ctx interface{}) *MockSdkClient_ReadAuthorizationModel_Call {
	return &MockSdkClient_ReadAuthorizationModel_Call{Call: _e.mock.On("ReadAuthorizationModel", ctx)}
}

func (_c *MockSdkClient_ReadAuthorizationModel_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadAuthorizationModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModel_Call) Return(_a0 client.SdkClientReadAuthorizationModelRequestInterface) *MockSdkClient_ReadAuthorizationModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModel_Call) RunAndReturn(run func(context.Context) client.SdkClientReadAuthorizationModelRequestInterface) *MockSdkClient_ReadAuthorizationModel_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAuthorizationModelExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ReadAuthorizationModelExecute(request client.SdkClientReadAuthorizationModelRequestInterface) (*openfga.ReadAuthorizationModelResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadAuthorizationModelExecute")
	}

	var r0 *openfga.ReadAuthorizationModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientReadAuthorizationModelRequestInterface) (*openfga.ReadAuthorizationModelResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientReadAuthorizationModelRequestInterface) *openfga.ReadAuthorizationModelResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ReadAuthorizationModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientReadAuthorizationModelRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ReadAuthorizationModelExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAuthorizationModelExecute'
type MockSdkClient_ReadAuthorizationModelExecute_Call struct {
	*mock.Call
}

// ReadAuthorizationModelExecute is a helper method to define mock.On call
//   - request client.SdkClientReadAuthorizationModelRequestInterface
func (_e *MockSdkClient_Expecter) ReadAuthorizationModelExecute(request interface{}) *MockSdkClient_ReadAuthorizationModelExecute_Call {
	return &MockSdkClient_ReadAuthorizationModelExecute_Call{Call: _e.mock.On("ReadAuthorizationModelExecute", request)}
}

func (_c *MockSdkClient_ReadAuthorizationModelExecute_Call) Run(run func(request client.SdkClientReadAuthorizationModelRequestInterface)) *MockSdkClient_ReadAuthorizationModelExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientReadAuthorizationModelRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModelExecute_Call) Return(_a0 *openfga.ReadAuthorizationModelResponse, _a1 error) *MockSdkClient_ReadAuthorizationModelExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModelExecute_Call) RunAndReturn(run func(client.SdkClientReadAuthorizationModelRequestInterface) (*openfga.ReadAuthorizationModelResponse, error)) *MockSdkClient_ReadAuthorizationModelExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAuthorizationModels provides a mock function with given fields: ctx
func (_m *MockSdkClient) ReadAuthorizationModels(ctx context.Context) client.SdkClientReadAuthorizationModelsRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadAuthorizationModels")
	}

	var r0 client.SdkClientReadAuthorizationModelsRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientReadAuthorizationModelsRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadAuthorizationModelsRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_ReadAuthorizationModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAuthorizationModels'
type MockSdkClient_ReadAuthorizationModels_Call struct {
	*mock.Call
}

// ReadAuthorizationModels is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadAuthorizationModels(ctx interface{}) *MockSdkClient_ReadAuthorizationModels_Call {
	return &MockSdkClient_ReadAuthorizationModels_Call{Call: _e.mock.On("ReadAuthorizationModels", ctx)}
}

func (_c *MockSdkClient_ReadAuthorizationModels_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadAuthorizationModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModels_Call) Return(_a0 client.SdkClientReadAuthorizationModelsRequestInterface) *MockSdkClient_ReadAuthorizationModels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModels_Call) RunAndReturn(run func(context.Context) client.SdkClientReadAuthorizationModelsRequestInterface) *MockSdkClient_ReadAuthorizationModels_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAuthorizationModelsExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ReadAuthorizationModelsExecute(request client.SdkClientReadAuthorizationModelsRequestInterface) (*openfga.ReadAuthorizationModelsResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadAuthorizationModelsExecute")
	}

	var r0 *openfga.ReadAuthorizationModelsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientReadAuthorizationModelsRequestInterface) (*openfga.ReadAuthorizationModelsResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientReadAuthorizationModelsRequestInterface) *openfga.ReadAuthorizationModelsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ReadAuthorizationModelsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientReadAuthorizationModelsRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ReadAuthorizationModelsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAuthorizationModelsExecute'
type MockSdkClient_ReadAuthorizationModelsExecute_Call struct {
	*mock.Call
}

// ReadAuthorizationModelsExecute is a helper method to define mock.On call
//   - request client.SdkClientReadAuthorizationModelsRequestInterface
func (_e *MockSdkClient_Expecter) ReadAuthorizationModelsExecute(request interface{}) *MockSdkClient_ReadAuthorizationModelsExecute_Call {
	return &MockSdkClient_ReadAuthorizationModelsExecute_Call{Call: _e.mock.On("ReadAuthorizationModelsExecute", request)}
}

func (_c *MockSdkClient_ReadAuthorizationModelsExecute_Call) Run(run func(request client.SdkClientReadAuthorizationModelsRequestInterface)) *MockSdkClient_ReadAuthorizationModelsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientReadAuthorizationModelsRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModelsExecute_Call) Return(_a0 *openfga.ReadAuthorizationModelsResponse, _a1 error) *MockSdkClient_ReadAuthorizationModelsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ReadAuthorizationModelsExecute_Call) RunAndReturn(run func(client.SdkClientReadAuthorizationModelsRequestInterface) (*openfga.ReadAuthorizationModelsResponse, error)) *MockSdkClient_ReadAuthorizationModelsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadChanges provides a mock function with given fields: ctx
func (_m *MockSdkClient) ReadChanges(ctx context.Context) client.SdkClientReadChangesRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadChanges")
	}

	var r0 client.SdkClientReadChangesRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientReadChangesRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadChangesRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_ReadChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadChanges'
type MockSdkClient_ReadChanges_Call struct {
	*mock.Call
}

// ReadChanges is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadChanges(ctx interface{}) *MockSdkClient_ReadChanges_Call {
	return &MockSdkClient_ReadChanges_Call{Call: _e.mock.On("ReadChanges", ctx)}
}

func (_c *MockSdkClient_ReadChanges_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_ReadChanges_Call) Return(_a0 client.SdkClientReadChangesRequestInterface) *MockSdkClient_ReadChanges_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_ReadChanges_Call) RunAndReturn(run func(context.Context) client.SdkClientReadChangesRequestInterface) *MockSdkClient_ReadChanges_Call {
	_c.Call.Return(run)
	return _c
}

// ReadChangesExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ReadChangesExecute(request client.SdkClientReadChangesRequestInterface) (*openfga.ReadChangesResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadChangesExecute")
	}

	var r0 *openfga.ReadChangesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientReadChangesRequestInterface) (*openfga.ReadChangesResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientReadChangesRequestInterface) *openfga.ReadChangesResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ReadChangesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientReadChangesRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ReadChangesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadChangesExecute'
type MockSdkClient_ReadChangesExecute_Call struct {
	*mock.Call
}

// ReadChangesExecute is a helper method to define mock.On call
//   - request client.SdkClientReadChangesRequestInterface
func (_e *MockSdkClient_Expecter) ReadChangesExecute(request interface{}) *MockSdkClient_ReadChangesExecute_Call {
	return &MockSdkClient_ReadChangesExecute_Call{Call: _e.mock.On("ReadChangesExecute", request)}
}

func (_c *MockSdkClient_ReadChangesExecute_Call) Run(run func(request client.SdkClientReadChangesRequestInterface)) *MockSdkClient_ReadChangesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientReadChangesRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ReadChangesExecute_Call) Return(_a0 *openfga.ReadChangesResponse, _a1 error) *MockSdkClient_ReadChangesExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ReadChangesExecute_Call) RunAndReturn(run func(client.SdkClientReadChangesRequestInterface) (*openfga.ReadChangesResponse, error)) *MockSdkClient_ReadChangesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ReadExecute(request client.SdkClientReadRequestInterface) (*openfga.ReadResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadExecute")
	}

	var r0 *openfga.ReadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientReadRequestInterface) (*openfga.ReadResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientReadRequestInterface) *openfga.ReadResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ReadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientReadRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ReadExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadExecute'
type MockSdkClient_ReadExecute_Call struct {
	*mock.Call
}

// ReadExecute is a helper method to define mock.On call
//   - request client.SdkClientReadRequestInterface
func (_e *MockSdkClient_Expecter) ReadExecute(request interface{}) *MockSdkClient_ReadExecute_Call {
	return &MockSdkClient_ReadExecute_Call{Call: _e.mock.On("ReadExecute", request)}
}

func (_c *MockSdkClient_ReadExecute_Call) Run(run func(request client.SdkClientReadRequestInterface)) *MockSdkClient_ReadExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientReadRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ReadExecute_Call) Return(_a0 *openfga.ReadResponse, _a1 error) *MockSdkClient_ReadExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ReadExecute_Call) RunAndReturn(run func(client.SdkClientReadRequestInterface) (*openfga.ReadResponse, error)) *MockSdkClient_ReadExecute_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLatestAuthorizationModel provides a mock function with given fields: ctx
func (_m *MockSdkClient) ReadLatestAuthorizationModel(ctx context.Context) client.SdkClientReadLatestAuthorizationModelRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReadLatestAuthorizationModel")
	}

	var r0 client.SdkClientReadLatestAuthorizationModelRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientReadLatestAuthorizationModelRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientReadLatestAuthorizationModelRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_ReadLatestAuthorizationModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLatestAuthorizationModel'
type MockSdkClient_ReadLatestAuthorizationModel_Call struct {
	*mock.Call
}

// ReadLatestAuthorizationModel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) ReadLatestAuthorizationModel(ctx interface{}) *MockSdkClient_ReadLatestAuthorizationModel_Call {
	return &MockSdkClient_ReadLatestAuthorizationModel_Call{Call: _e.mock.On("ReadLatestAuthorizationModel", ctx)}
}

func (_c *MockSdkClient_ReadLatestAuthorizationModel_Call) Run(run func(ctx context.Context)) *MockSdkClient_ReadLatestAuthorizationModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_ReadLatestAuthorizationModel_Call) Return(_a0 client.SdkClientReadLatestAuthorizationModelRequestInterface) *MockSdkClient_ReadLatestAuthorizationModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_ReadLatestAuthorizationModel_Call) RunAndReturn(run func(context.Context) client.SdkClientReadLatestAuthorizationModelRequestInterface) *MockSdkClient_ReadLatestAuthorizationModel_Call {
	_c.Call.Return(run)
	return _c
}

// ReadLatestAuthorizationModelExecute provides a mock function with given fields: request
func (_m *MockSdkClient) ReadLatestAuthorizationModelExecute(request client.SdkClientReadLatestAuthorizationModelRequestInterface) (*openfga.ReadAuthorizationModelResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ReadLatestAuthorizationModelExecute")
	}

	var r0 *openfga.ReadAuthorizationModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientReadLatestAuthorizationModelRequestInterface) (*openfga.ReadAuthorizationModelResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientReadLatestAuthorizationModelRequestInterface) *openfga.ReadAuthorizationModelResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ReadAuthorizationModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientReadLatestAuthorizationModelRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_ReadLatestAuthorizationModelExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLatestAuthorizationModelExecute'
type MockSdkClient_ReadLatestAuthorizationModelExecute_Call struct {
	*mock.Call
}

// ReadLatestAuthorizationModelExecute is a helper method to define mock.On call
//   - request client.SdkClientReadLatestAuthorizationModelRequestInterface
func (_e *MockSdkClient_Expecter) ReadLatestAuthorizationModelExecute(request interface{}) *MockSdkClient_ReadLatestAuthorizationModelExecute_Call {
	return &MockSdkClient_ReadLatestAuthorizationModelExecute_Call{Call: _e.mock.On("ReadLatestAuthorizationModelExecute", request)}
}

func (_c *MockSdkClient_ReadLatestAuthorizationModelExecute_Call) Run(run func(request client.SdkClientReadLatestAuthorizationModelRequestInterface)) *MockSdkClient_ReadLatestAuthorizationModelExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientReadLatestAuthorizationModelRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_ReadLatestAuthorizationModelExecute_Call) Return(_a0 *openfga.ReadAuthorizationModelResponse, _a1 error) *MockSdkClient_ReadLatestAuthorizationModelExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_ReadLatestAuthorizationModelExecute_Call) RunAndReturn(run func(client.SdkClientReadLatestAuthorizationModelRequestInterface) (*openfga.ReadAuthorizationModelResponse, error)) *MockSdkClient_ReadLatestAuthorizationModelExecute_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx
func (_m *MockSdkClient) Write(ctx context.Context) client.SdkClientWriteRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 client.SdkClientWriteRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientWriteRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockSdkClient_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) Write(ctx interface{}) *MockSdkClient_Write_Call {
	return &MockSdkClient_Write_Call{Call: _e.mock.On("Write", ctx)}
}

func (_c *MockSdkClient_Write_Call) Run(run func(ctx context.Context)) *MockSdkClient_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_Write_Call) Return(_a0 client.SdkClientWriteRequestInterface) *MockSdkClient_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_Write_Call) RunAndReturn(run func(context.Context) client.SdkClientWriteRequestInterface) *MockSdkClient_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAssertions provides a mock function with given fields: ctx
func (_m *MockSdkClient) WriteAssertions(ctx context.Context) client.SdkClientWriteAssertionsRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WriteAssertions")
	}

	var r0 client.SdkClientWriteAssertionsRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientWriteAssertionsRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteAssertionsRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_WriteAssertions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAssertions'
type MockSdkClient_WriteAssertions_Call struct {
	*mock.Call
}

// WriteAssertions is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) WriteAssertions(ctx interface{}) *MockSdkClient_WriteAssertions_Call {
	return &MockSdkClient_WriteAssertions_Call{Call: _e.mock.On("WriteAssertions", ctx)}
}

func (_c *MockSdkClient_WriteAssertions_Call) Run(run func(ctx context.Context)) *MockSdkClient_WriteAssertions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_WriteAssertions_Call) Return(_a0 client.SdkClientWriteAssertionsRequestInterface) *MockSdkClient_WriteAssertions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_WriteAssertions_Call) RunAndReturn(run func(context.Context) client.SdkClientWriteAssertionsRequestInterface) *MockSdkClient_WriteAssertions_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAssertionsExecute provides a mock function with given fields: request
func (_m *MockSdkClient) WriteAssertionsExecute(request client.SdkClientWriteAssertionsRequestInterface) (*client.ClientWriteAssertionsResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for WriteAssertionsExecute")
	}

	var r0 *client.ClientWriteAssertionsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientWriteAssertionsRequestInterface) (*client.ClientWriteAssertionsResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientWriteAssertionsRequestInterface) *client.ClientWriteAssertionsResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteAssertionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientWriteAssertionsRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_WriteAssertionsExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAssertionsExecute'
type MockSdkClient_WriteAssertionsExecute_Call struct {
	*mock.Call
}

// WriteAssertionsExecute is a helper method to define mock.On call
//   - request client.SdkClientWriteAssertionsRequestInterface
func (_e *MockSdkClient_Expecter) WriteAssertionsExecute(request interface{}) *MockSdkClient_WriteAssertionsExecute_Call {
	return &MockSdkClient_WriteAssertionsExecute_Call{Call: _e.mock.On("WriteAssertionsExecute", request)}
}

func (_c *MockSdkClient_WriteAssertionsExecute_Call) Run(run func(request client.SdkClientWriteAssertionsRequestInterface)) *MockSdkClient_WriteAssertionsExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientWriteAssertionsRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_WriteAssertionsExecute_Call) Return(_a0 *client.ClientWriteAssertionsResponse, _a1 error) *MockSdkClient_WriteAssertionsExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_WriteAssertionsExecute_Call) RunAndReturn(run func(client.SdkClientWriteAssertionsRequestInterface) (*client.ClientWriteAssertionsResponse, error)) *MockSdkClient_WriteAssertionsExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAuthorizationModel provides a mock function with given fields: ctx
func (_m *MockSdkClient) WriteAuthorizationModel(ctx context.Context) client.SdkClientWriteAuthorizationModelRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WriteAuthorizationModel")
	}

	var r0 client.SdkClientWriteAuthorizationModelRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientWriteAuthorizationModelRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteAuthorizationModelRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_WriteAuthorizationModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAuthorizationModel'
type MockSdkClient_WriteAuthorizationModel_Call struct {
	*mock.Call
}

// WriteAuthorizationModel is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) WriteAuthorizationModel(ctx interface{}) *MockSdkClient_WriteAuthorizationModel_Call {
	return &MockSdkClient_WriteAuthorizationModel_Call{Call: _e.mock.On("WriteAuthorizationModel", ctx)}
}

func (_c *MockSdkClient_WriteAuthorizationModel_Call) Run(run func(ctx context.Context)) *MockSdkClient_WriteAuthorizationModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_WriteAuthorizationModel_Call) Return(_a0 client.SdkClientWriteAuthorizationModelRequestInterface) *MockSdkClient_WriteAuthorizationModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_WriteAuthorizationModel_Call) RunAndReturn(run func(context.Context) client.SdkClientWriteAuthorizationModelRequestInterface) *MockSdkClient_WriteAuthorizationModel_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAuthorizationModelExecute provides a mock function with given fields: request
func (_m *MockSdkClient) WriteAuthorizationModelExecute(request client.SdkClientWriteAuthorizationModelRequestInterface) (*openfga.WriteAuthorizationModelResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for WriteAuthorizationModelExecute")
	}

	var r0 *openfga.WriteAuthorizationModelResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientWriteAuthorizationModelRequestInterface) (*openfga.WriteAuthorizationModelResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientWriteAuthorizationModelRequestInterface) *openfga.WriteAuthorizationModelResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.WriteAuthorizationModelResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientWriteAuthorizationModelRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_WriteAuthorizationModelExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAuthorizationModelExecute'
type MockSdkClient_WriteAuthorizationModelExecute_Call struct {
	*mock.Call
}

// WriteAuthorizationModelExecute is a helper method to define mock.On call
//   - request client.SdkClientWriteAuthorizationModelRequestInterface
func (_e *MockSdkClient_Expecter) WriteAuthorizationModelExecute(request interface{}) *MockSdkClient_WriteAuthorizationModelExecute_Call {
	return &MockSdkClient_WriteAuthorizationModelExecute_Call{Call: _e.mock.On("WriteAuthorizationModelExecute", request)}
}

func (_c *MockSdkClient_WriteAuthorizationModelExecute_Call) Run(run func(request client.SdkClientWriteAuthorizationModelRequestInterface)) *MockSdkClient_WriteAuthorizationModelExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientWriteAuthorizationModelRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_WriteAuthorizationModelExecute_Call) Return(_a0 *openfga.WriteAuthorizationModelResponse, _a1 error) *MockSdkClient_WriteAuthorizationModelExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_WriteAuthorizationModelExecute_Call) RunAndReturn(run func(client.SdkClientWriteAuthorizationModelRequestInterface) (*openfga.WriteAuthorizationModelResponse, error)) *MockSdkClient_WriteAuthorizationModelExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WriteExecute provides a mock function with given fields: request
func (_m *MockSdkClient) WriteExecute(request client.SdkClientWriteRequestInterface) (*client.ClientWriteResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for WriteExecute")
	}

	var r0 *client.ClientWriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientWriteRequestInterface) (*client.ClientWriteResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientWriteRequestInterface) *client.ClientWriteResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientWriteRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_WriteExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteExecute'
type MockSdkClient_WriteExecute_Call struct {
	*mock.Call
}

// WriteExecute is a helper method to define mock.On call
//   - request client.SdkClientWriteRequestInterface
func (_e *MockSdkClient_Expecter) WriteExecute(request interface{}) *MockSdkClient_WriteExecute_Call {
	return &MockSdkClient_WriteExecute_Call{Call: _e.mock.On("WriteExecute", request)}
}

func (_c *MockSdkClient_WriteExecute_Call) Run(run func(request client.SdkClientWriteRequestInterface)) *MockSdkClient_WriteExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientWriteRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_WriteExecute_Call) Return(_a0 *client.ClientWriteResponse, _a1 error) *MockSdkClient_WriteExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_WriteExecute_Call) RunAndReturn(run func(client.SdkClientWriteRequestInterface) (*client.ClientWriteResponse, error)) *MockSdkClient_WriteExecute_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTuples provides a mock function with given fields: ctx
func (_m *MockSdkClient) WriteTuples(ctx context.Context) client.SdkClientWriteTuplesRequestInterface {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for WriteTuples")
	}

	var r0 client.SdkClientWriteTuplesRequestInterface
	if rf, ok := ret.Get(0).(func(context.Context) client.SdkClientWriteTuplesRequestInterface); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientWriteTuplesRequestInterface)
		}
	}

	return r0
}

// MockSdkClient_WriteTuples_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTuples'
type MockSdkClient_WriteTuples_Call struct {
	*mock.Call
}

// WriteTuples is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockSdkClient_Expecter) WriteTuples(ctx interface{}) *MockSdkClient_WriteTuples_Call {
	return &MockSdkClient_WriteTuples_Call{Call: _e.mock.On("WriteTuples", ctx)}
}

func (_c *MockSdkClient_WriteTuples_Call) Run(run func(ctx context.Context)) *MockSdkClient_WriteTuples_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSdkClient_WriteTuples_Call) Return(_a0 client.SdkClientWriteTuplesRequestInterface) *MockSdkClient_WriteTuples_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClient_WriteTuples_Call) RunAndReturn(run func(context.Context) client.SdkClientWriteTuplesRequestInterface) *MockSdkClient_WriteTuples_Call {
	_c.Call.Return(run)
	return _c
}

// WriteTuplesExecute provides a mock function with given fields: request
func (_m *MockSdkClient) WriteTuplesExecute(request client.SdkClientWriteTuplesRequestInterface) (*client.ClientWriteResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for WriteTuplesExecute")
	}

	var r0 *client.ClientWriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(client.SdkClientWriteTuplesRequestInterface) (*client.ClientWriteResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(client.SdkClientWriteTuplesRequestInterface) *client.ClientWriteResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientWriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(client.SdkClientWriteTuplesRequestInterface) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClient_WriteTuplesExecute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteTuplesExecute'
type MockSdkClient_WriteTuplesExecute_Call struct {
	*mock.Call
}

// WriteTuplesExecute is a helper method to define mock.On call
//   - request client.SdkClientWriteTuplesRequestInterface
func (_e *MockSdkClient_Expecter) WriteTuplesExecute(request interface{}) *MockSdkClient_WriteTuplesExecute_Call {
	return &MockSdkClient_WriteTuplesExecute_Call{Call: _e.mock.On("WriteTuplesExecute", request)}
}

func (_c *MockSdkClient_WriteTuplesExecute_Call) Run(run func(request client.SdkClientWriteTuplesRequestInterface)) *MockSdkClient_WriteTuplesExecute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.SdkClientWriteTuplesRequestInterface))
	})
	return _c
}

func (_c *MockSdkClient_WriteTuplesExecute_Call) Return(_a0 *client.ClientWriteResponse, _a1 error) *MockSdkClient_WriteTuplesExecute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClient_WriteTuplesExecute_Call) RunAndReturn(run func(client.SdkClientWriteTuplesRequestInterface) (*client.ClientWriteResponse, error)) *MockSdkClient_WriteTuplesExecute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClient creates a new instance of MockSdkClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClient {
	mock := &MockSdkClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
