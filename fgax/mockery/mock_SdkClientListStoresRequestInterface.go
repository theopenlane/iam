// Code generated by mockery. DO NOT EDIT.

package client

import (
	context "context"

	client "github.com/openfga/go-sdk/client"

	mock "github.com/stretchr/testify/mock"

	openfga "github.com/openfga/go-sdk"
)

// MockSdkClientListStoresRequestInterface is an autogenerated mock type for the SdkClientListStoresRequestInterface type
type MockSdkClientListStoresRequestInterface struct {
	mock.Mock
}

type MockSdkClientListStoresRequestInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSdkClientListStoresRequestInterface) EXPECT() *MockSdkClientListStoresRequestInterface_Expecter {
	return &MockSdkClientListStoresRequestInterface_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *MockSdkClientListStoresRequestInterface) Execute() (*openfga.ListStoresResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *openfga.ListStoresResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*openfga.ListStoresResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *openfga.ListStoresResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*openfga.ListStoresResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSdkClientListStoresRequestInterface_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSdkClientListStoresRequestInterface_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *MockSdkClientListStoresRequestInterface_Expecter) Execute() *MockSdkClientListStoresRequestInterface_Execute_Call {
	return &MockSdkClientListStoresRequestInterface_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *MockSdkClientListStoresRequestInterface_Execute_Call) Run(run func()) *MockSdkClientListStoresRequestInterface_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListStoresRequestInterface_Execute_Call) Return(_a0 *openfga.ListStoresResponse, _a1 error) *MockSdkClientListStoresRequestInterface_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSdkClientListStoresRequestInterface_Execute_Call) RunAndReturn(run func() (*openfga.ListStoresResponse, error)) *MockSdkClientListStoresRequestInterface_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetContext provides a mock function with given fields:
func (_m *MockSdkClientListStoresRequestInterface) GetContext() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// MockSdkClientListStoresRequestInterface_GetContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContext'
type MockSdkClientListStoresRequestInterface_GetContext_Call struct {
	*mock.Call
}

// GetContext is a helper method to define mock.On call
func (_e *MockSdkClientListStoresRequestInterface_Expecter) GetContext() *MockSdkClientListStoresRequestInterface_GetContext_Call {
	return &MockSdkClientListStoresRequestInterface_GetContext_Call{Call: _e.mock.On("GetContext")}
}

func (_c *MockSdkClientListStoresRequestInterface_GetContext_Call) Run(run func()) *MockSdkClientListStoresRequestInterface_GetContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListStoresRequestInterface_GetContext_Call) Return(_a0 context.Context) *MockSdkClientListStoresRequestInterface_GetContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClientListStoresRequestInterface_GetContext_Call) RunAndReturn(run func() context.Context) *MockSdkClientListStoresRequestInterface_GetContext_Call {
	_c.Call.Return(run)
	return _c
}

// GetOptions provides a mock function with given fields:
func (_m *MockSdkClientListStoresRequestInterface) GetOptions() *client.ClientListStoresOptions {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOptions")
	}

	var r0 *client.ClientListStoresOptions
	if rf, ok := ret.Get(0).(func() *client.ClientListStoresOptions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.ClientListStoresOptions)
		}
	}

	return r0
}

// MockSdkClientListStoresRequestInterface_GetOptions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOptions'
type MockSdkClientListStoresRequestInterface_GetOptions_Call struct {
	*mock.Call
}

// GetOptions is a helper method to define mock.On call
func (_e *MockSdkClientListStoresRequestInterface_Expecter) GetOptions() *MockSdkClientListStoresRequestInterface_GetOptions_Call {
	return &MockSdkClientListStoresRequestInterface_GetOptions_Call{Call: _e.mock.On("GetOptions")}
}

func (_c *MockSdkClientListStoresRequestInterface_GetOptions_Call) Run(run func()) *MockSdkClientListStoresRequestInterface_GetOptions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSdkClientListStoresRequestInterface_GetOptions_Call) Return(_a0 *client.ClientListStoresOptions) *MockSdkClientListStoresRequestInterface_GetOptions_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClientListStoresRequestInterface_GetOptions_Call) RunAndReturn(run func() *client.ClientListStoresOptions) *MockSdkClientListStoresRequestInterface_GetOptions_Call {
	_c.Call.Return(run)
	return _c
}

// Options provides a mock function with given fields: options
func (_m *MockSdkClientListStoresRequestInterface) Options(options client.ClientListStoresOptions) client.SdkClientListStoresRequestInterface {
	ret := _m.Called(options)

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 client.SdkClientListStoresRequestInterface
	if rf, ok := ret.Get(0).(func(client.ClientListStoresOptions) client.SdkClientListStoresRequestInterface); ok {
		r0 = rf(options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.SdkClientListStoresRequestInterface)
		}
	}

	return r0
}

// MockSdkClientListStoresRequestInterface_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type MockSdkClientListStoresRequestInterface_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
//   - options client.ClientListStoresOptions
func (_e *MockSdkClientListStoresRequestInterface_Expecter) Options(options interface{}) *MockSdkClientListStoresRequestInterface_Options_Call {
	return &MockSdkClientListStoresRequestInterface_Options_Call{Call: _e.mock.On("Options", options)}
}

func (_c *MockSdkClientListStoresRequestInterface_Options_Call) Run(run func(options client.ClientListStoresOptions)) *MockSdkClientListStoresRequestInterface_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(client.ClientListStoresOptions))
	})
	return _c
}

func (_c *MockSdkClientListStoresRequestInterface_Options_Call) Return(_a0 client.SdkClientListStoresRequestInterface) *MockSdkClientListStoresRequestInterface_Options_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSdkClientListStoresRequestInterface_Options_Call) RunAndReturn(run func(client.ClientListStoresOptions) client.SdkClientListStoresRequestInterface) *MockSdkClientListStoresRequestInterface_Options_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSdkClientListStoresRequestInterface creates a new instance of MockSdkClientListStoresRequestInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSdkClientListStoresRequestInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSdkClientListStoresRequestInterface {
	mock := &MockSdkClientListStoresRequestInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
