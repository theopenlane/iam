{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "authFromMutation" }}
// Code generated by entfga, DO NOT EDIT.

    {{ $pkg := base $.Config.Package }}
    {{ template "header" $ }}

    {{/* Add Check for Soft Delete See: AuthzConfig.SoftDeletes */}}
    {{ $softDeletes := $.Annotations.AuthzConfig.SoftDeletes }}

    {{ range $n := $.Nodes }}
    {{ $name := $n.Name }}
        {{ $mutator := $n.MutationName }}
        {{/* Only include nodes with the Authz annotation with hooks. See: Annotation.Name */}}
        {{ if and ($n.Annotations.Authz) ($n.Annotations.Authz.IncludeHooks) }}

            {{ $objectType := extractObjectType $n.Annotations.Authz.ObjectType }}
            func (m *{{ $mutator }}) CreateTuplesFromCreate(ctx context.Context) error {
                {{ $includeHooks := extractIncludeHooks $n.Annotations.Authz.IncludeHooks }}
                // Get fields for tuple creation
                userID, _ := m.UserID()
                objectID, _ := m.{{ $objectType | ToUpperCamel }}ID()
                role, _ := m.Role()

                // get tuple key
                req := fgax.TupleRequest{
                    SubjectID:   userID,
                    SubjectType: "user",
                    ObjectID: objectID,
                    ObjectType: "{{ $objectType | ToLower }}",
                    Relation: role.String(),
                }
                tuple := fgax.GetTupleKey(req)

                if _, err := m.Authz.WriteTupleKeys(ctx, []fgax.TupleKey{tuple}, nil); err != nil {
                    m.Logger.Errorw("failed to create relationship tuple", "error", err)

                    return err
                }

                m.Logger.Debugw("created relationship tuples", "relation", role, "object", tuple.Object)

                return nil
            }

            func (m *{{ $mutator }}) CreateTuplesFromUpdate(ctx context.Context) error {
                {{ $includeHooks := extractIncludeHooks $n.Annotations.Authz.IncludeHooks }}

                {{- if $softDeletes }}
                // check for soft delete operation and delete instead
                if entx.CheckIsSoftDelete(ctx) {
                    return m.CreateTuplesFromDelete(ctx)
                }
                {{- end }}

                // get ids that will be updated
                ids, err := m.IDs(ctx)
                if err != nil {
                    return err
                }

                var (
                    writes  []fgax.TupleKey
                    deletes []fgax.TupleKey
                )

                oldRole, err := m.OldRole(ctx)
                if err != nil {
                    return err
                }

                newRole, exists := m.Role()
                if !exists {
                    return entfga.ErrMissingRole
                }

                if oldRole == newRole {
                    m.Logger.Debugw("nothing to update, roles are the same", "old_role", oldRole, "new_role", newRole)

                    return nil
                }

                // User the IDs of the memberships and delete all related tuples
                for _, id := range ids {
                    member, err := m.Client().{{ $name }}.Get(ctx, id)
                    if err != nil {
                        return err
                    }

                    req := fgax.TupleRequest{
                        SubjectID:   member.UserID,
                        SubjectType: "user",
                        ObjectID:  member.{{ $objectType | ToUpperCamel }}ID,
                        ObjectType: "{{ $objectType | ToLower }}",
                        Relation: oldRole.String(),
                    }
                    d := fgax.GetTupleKey(req)

                    deletes = append(deletes, d)

                    req.Relation = newRole.String()
                    w := fgax.GetTupleKey(req)

                    writes = append(writes, w)

                    if len(writes) == 0 && len(deletes) == 0 {
                        m.Logger.Debugw("no relationships to create or delete")

                        return nil
                    }

                    if _, err := m.Authz.WriteTupleKeys(ctx, writes, deletes); err != nil {
                        m.Logger.Errorw("failed to update relationship tuple", "error", err)

                        return err
                    }
                }

                return nil
            }

            func (m *{{ $mutator }}) CreateTuplesFromDelete(ctx context.Context) error {
                {{ $includeHooks := extractIncludeHooks $n.Annotations.Authz.IncludeHooks }}

                {{- if $softDeletes }}
                // check for soft delete operation and skip so it happens on update
                if entx.CheckIsSoftDelete(ctx) {
                    return nil
                }
                {{- end }}

                // get ids that will be deleted
                ids, err := m.IDs(ctx)
                if err != nil {
                    return err
                }

                tuples := []fgax.TupleKey{}

                // User the IDs of the memberships and delete all related tuples
                for _, id := range ids {
                    // this wont work with soft deletes
                    members, err := m.Client().{{ $name }}.Get(ctx, id)
                    if err != nil {
                        return err
                    }

                    req := fgax.TupleRequest{
                        SubjectID:   members.UserID,
                        SubjectType: "user",
                        ObjectID:  members.{{ $objectType | ToUpperCamel }}ID,
                        ObjectType: "{{ $objectType | ToLower }}",
                        Relation: members.Role.String(),
                    }
                    t := fgax.GetTupleKey(req)

                    tuples = append(tuples, t)
                }

                if len(tuples) > 0 {
                    if _, err := m.Authz.WriteTupleKeys(ctx, nil, tuples); err != nil {
                        m.Logger.Errorw("failed to delete relationship tuple", "error", err)

                        return err
                    }

                    m.Logger.Debugw("deleted relationship tuples")
                }

                return nil
            }
    {{ end }}
    {{ end }}
{{ end }}